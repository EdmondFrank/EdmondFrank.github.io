<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[EdmondFrank's 时光足迹]]></title>
  <link href="http://edmondfrank.github.io/atom.xml" rel="self"/>
  <link href="http://edmondfrank.github.io/"/>
  <updated>2017-08-06T23:04:12+08:00</updated>
  <id>http://edmondfrank.github.io/</id>
  <author>
    <name><![CDATA[EdmondFrank]]></name>
    <email><![CDATA[EdmomdFrank@yahoo.co.jp]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[机器学习概述-科普向]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/08/06/ji-qi-xue-xi-gai-shu-ke-pu-xiang/"/>
    <updated>2017-08-06T23:02:41+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/08/06/ji-qi-xue-xi-gai-shu-ke-pu-xiang</id>
    <content type="html"><![CDATA[<h1>机器学习概论-科普篇</h1>

<h2>什么是机器学习？</h2>

<p>机器学习是一门多领域交叉学科。专门研究计算机或其他软硬件设备怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有知识结构使不断改善自身的性能。</p>

<h2>机器学习的应用领域</h2>

<p>机器学习是人工智能研究的核心内容。它的应用已遍及人工智能的各个分支。如：专家系统，自动推理，自然语言处理，模式识别，计算机视觉，智能机器人等领域。</p>

<h2>机器学习与数据挖掘的区别</h2>

<p>机器学习在数据挖掘中被大量使用，其技术内涵几乎通用，可以看作同一座山峰在不同角度下的侧影。</p>

<h2>机器学习与统计学的关系</h2>

<p>机器学习和统计学是非常接近的两个领域。根据 Michael I. Jordan在机器学习领域的理念，从方法论原则到理论工具，在统计学领域是有一段很长的史前史。他也建议数据科学这一术语作为全部领域的前置。 Leo Breiman区别两个统计学的模型：数据模型和算法模型，在算法模型中意味着或多或少包含着机器学习的算法，比如随机森林（Random forest）。 一些统计学家已经采纳了机器学习中的一些做法，引申出了一个联结领域&mdash;&ndash;统计学习。</p>

<h2>机器学习方法</h2>

<p><strong>决策树学习：</strong>决策树学习使用了一个决策树作为预测性模型，映射一个对象的观察结果给其目标价值一个推论。</p>

<p><strong>关联规则学习:</strong>是一种用来在大型数据库中发现变量之间的有趣联系的方法,例如频繁模式挖掘。</p>

<p><strong>人工神经网络：</strong>一个人工神经网络学习（ANN）算法，通常被称为神经网络（NN），是一个由生物的神经网络所激发出的一个算法。计算结构是由联结的人工神经元组所构成，通过联结式的方法来传递信息和计算。现代神经网络是非线性的统计学数据模型工具。它们通常被用来在输入和输出之间模拟复杂关系，找到数据中的关系，或者在观测变量中从不知道的节点捕获统计学结构。</p>

<p><strong>深度学习：</strong>个人不能承受硬件的价格和GPU的发展推动了这些年深度学习的进步，深度学习是由人工神经网络中的多个隐藏层组成的。这条道路试图去模拟人脑的过程，光、声进入视觉和听觉。一些成功的应用有计算机视觉和演讲识别。</p>

<p><strong>归纳逻辑编程：</strong>归纳逻辑编程（ILP）是一门用逻辑编程控制规则的学科，它使用统一的表示法来处理输入样例，背景知识和假说。给定已知的背景知识的编码和一组被表示为事实的逻辑数据库的示例，ILP系统将派生出一个假设的逻辑程序，该程序包含所有积极的和没有负面的示例。归纳编程是一个相关的领域，它考虑任何一种表示假设(而不仅仅是逻辑编程)的编程语言，例如函数式编程。</p>

<p><strong>支持向量机：</strong>支持向量机是一系列关于监督学习在分类和回归上的应用。给出训练样本的数据集，每一个标记属于两类中的一类，一个SVM训练算法构成了一个模型，可以用来预测一个新的样本是否进入一个类别或者是另一个。</p>

<p><strong>集群：</strong>集群分析是将一组观察结果分配到子集(称为集群)，这样，同一集群中的观察与一些预先确定的标准或标准相似，而来自不同集群的观察则不同。不同的聚类技术对数据的结构作出不同的假设，通常由一些相似性度量定义，并通过内部紧度(相同集群的成员之间的相似性)和不同的集群之间的分离来评估。其他方法基于估计的密度和图连通性。摘要聚类是一种非引导性学习的方法，是一种统计数据分析的常用技术。</p>

<p><strong>贝叶斯网络：</strong>一个贝叶斯网络，信任网络或者有向无环图模型是一个概率性图的模型，它通过有向无环图代表了一系列的随机变量和他们的条件独立性。举例，一个贝叶斯网络代表着疾病和症状可能的关系。给出症状，网络可以被用来计算疾病出现的可能性。有效的算法存在于执行推理和学习的过程中。</p>

<p><strong>增强学习：</strong>增强学习关心代理人如何在一个环境中采取行动，从而最大化一些长期受益的概念。增强学习算法尝试去寻找一些策略，映射当前世界的状态给代理在这些状态中应该采取的行动。</p>

<p><strong>相似度量学习：</strong>在这个问题中，学习机被给予了很多对相似或者不相似的例子。它需要去学习一个相似的函数，以用来预测一个新的对象是否相似。它有时被用到推荐系统中。</p>

<p><strong>遗传算法：</strong>遗传算法是一种启发式搜索，它模仿自然选择的过程，并且使用一些突变和变向来生成新的基因型，以找到好的情况解决问题。在机器学习中，遗传算法在20世纪80年代和90年代使用过。反之，机器学习技术被用来提高遗传和进化算法的表现。</p>

<p><strong>基于规则的机器学习：</strong>基于规则的机器学习是任何机器学习方法的通用术语，它可以识别、学习或发展规则来存储、操作或应用知识。基于规则的机器学习者的定义特征是一组关系规则的标识和利用，这些规则集合了系统所捕获的知识。这与其他机器学习者形成鲜明对比，他们通常会识别出一种特殊的模型，这种模型可以普遍应用于任何实例，以便做出预测。基于规则的机器学习方法包括学习分类器系统、关联规则学习和人工免疫系统。</p>

<h2>机器学习应用场景</h2>

<h3>活跃的领域：</h3>

<ul>
<li>数据分析</li>
<li>数据挖掘。</li>
<li>图像和语音识别</li>
<li>智能机器，机器人，人机对话，电脑博弈。</li>
</ul>


<h3>推荐系统：</h3>

<ul>
<li>基于物品的协同过滤</li>
<li>频繁模式挖掘</li>
</ul>


<h3>贝叶斯分类器：</h3>

<ul>
<li>垃圾邮件过滤</li>
<li>网页自动分类：自动化门户系统</li>
<li>评论自动分析</li>
</ul>


<h3>决策树</h3>

<ul>
<li>量化交易</li>
<li>智能博弈</li>
<li>局面标准化</li>
<li>局面评估函数</li>
<li>棋谱学习</li>
</ul>


<h3>神经网络和深度学习</h3>

<ul>
<li>语音识别,图像识别</li>
<li>图形识别：</li>
<li>车牌识别</li>
<li>指纹，虹膜纹识别</li>
<li>脸像识别</li>
<li>动态图像识别</li>
<li>小波分析</li>
</ul>


<h2>机器学习常用软件</h2>

<p>常用软件列表：</p>

<ul>
<li>R（及其扩展包）</li>
<li>Weka（Waikato Environment for Knowledge Analysis）</li>
<li>Matlab</li>
<li>Python,numpy,matplotlib,sklearn,tensorflow</li>
</ul>


<h2>代表性算法</h2>

<h3>回归预测及降维技术：</h3>

<ul>
<li>线性回归</li>
<li>Logistic回归</li>
<li>主成分分析</li>
<li>因子分析</li>
<li>岭回归</li>
<li>LASSO</li>
</ul>


<h3>分类器:</h3>

<ul>
<li>决策树</li>
<li>朴素贝叶斯</li>
<li>贝叶斯信念网络</li>
<li>支持向量机(SVM)</li>
<li>提升分类器准确率的Adaboost和随机森林算法</li>
</ul>


<h3>聚类和孤立点判别</h3>

<ul>
<li>Kmeans聚类</li>
</ul>


<h3>人工神经网路及深度学习</h3>

<ul>
<li>CNN</li>
<li>RNN</li>
</ul>


<p>&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala概率编程语言库-Figaro介绍]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/07/24/scalagai-lu-bian-cheng-yu-yan-ku-figarojie-shao/"/>
    <updated>2017-07-24T16:15:49+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/07/24/scalagai-lu-bian-cheng-yu-yan-ku-figarojie-shao</id>
    <content type="html"><![CDATA[<h1>Scala 的概率编程语言库-Figaro</h1>

<h2>什么是概率编程？</h2>

<p><strong>概率编程</strong>是一种系统创建方法，它所创建的系统能够帮助我们在面对不确定性时作出决策。</p>

<h2>为什么使用概率编程？</h2>

<p>概率推理是机器学习的基础技术之一。Google,Amazon和Microsoft等公司使用它理解可用数据。概率推理已经应用于各种各样的应用程序，如预测股价，推荐电影，诊断计算机和检测网络入侵。</p>

<ul>
<li>概率推理可用于预测未来，推断过去，以及从过去的事实中学习更好地预测未来。</li>
<li>概率编程是使用图灵完备的编程语言作为表示语言的概率编程。</li>
</ul>


<p><strong>事实上：</strong>概率推理 + 图灵完备 = 概率编程</p>

<h2>Figaro的简介</h2>

<p>Figaro是一个内嵌于Scala编程语言的概率编程系统。除了继承了Scala的良好特性外，Figaro还提供了相当多的额外的优势，包括：</p>

<ul>
<li>Figaro能够表示及其广泛的概率模型。Figaro元素的值可以为任何类型，包括布尔型，整数，双精度数，数组，树，图等。</li>
<li>Figaro提供了使用其条件和约束规定证据的丰富框架</li>
<li>Figaro有多种多样的推理算法</li>
<li>Figaro能够表示和推理随时间变化的的动态模型</li>
<li>Figaro能够在其模型中包含明确决策，并支持最优决策的推断。</li>
</ul>


<h2>简单示例-量化“你好，世界”</h2>

<p>图片截取自<a href="http://www.epubit.com.cn/book/details/4366">《概率编程实战》</a> 表 1-1
<img src="http://edmondfrank.github.io/images/figaro.jpg"></p>

<p><strong>代码实现：</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">mport</span> <span class="n">com</span><span class="o">.</span><span class="n">cra</span><span class="o">.</span><span class="n">figaro</span><span class="o">.</span><span class="n">language</span><span class="o">.</span><span class="k">_</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.cra.figaro.library.compound.If</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.cra.figaro.algorithm.factored.VariableElimination</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Main</span><span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sunnyToday</span> <span class="k">=</span> <span class="nc">Flip</span><span class="o">(</span><span class="mf">0.2</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">greetingToday</span> <span class="k">=</span> <span class="nc">If</span><span class="o">(</span><span class="n">sunnyToday</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">Select</span><span class="o">(</span><span class="mf">0.6</span> <span class="o">-&gt;</span> <span class="s">&quot;Hello World&quot;</span><span class="o">,</span><span class="mf">0.4</span> <span class="o">-&gt;</span> <span class="s">&quot;Howdy universe&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Select</span><span class="o">(</span><span class="mf">0.2</span> <span class="o">-&gt;</span> <span class="s">&quot;Hello World&quot;</span><span class="o">,</span><span class="mf">0.8</span><span class="o">-&gt;</span> <span class="s">&quot;no not again!&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">sunnyTomorrow</span> <span class="k">=</span> <span class="nc">If</span><span class="o">(</span><span class="n">sunnyToday</span><span class="o">,</span> <span class="nc">Flip</span> <span class="o">(</span><span class="mf">0.8</span><span class="o">)</span> <span class="o">,</span> <span class="nc">Flip</span> <span class="o">(</span><span class="mf">0.05</span><span class="o">))</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">greetingTomorrow</span> <span class="k">=</span> <span class="nc">If</span><span class="o">(</span><span class="n">sunnyTomorrow</span><span class="o">,</span>
</span><span class='line'>    <span class="nc">Select</span><span class="o">(</span><span class="mf">0.6</span> <span class="o">-&gt;</span> <span class="s">&quot;Hello World&quot;</span><span class="o">,</span><span class="mf">0.4</span> <span class="o">-&gt;</span> <span class="s">&quot;Howdy universe&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">Select</span><span class="o">(</span><span class="mf">0.6</span> <span class="o">-&gt;</span> <span class="s">&quot;Hello World&quot;</span><span class="o">,</span><span class="mf">0.4</span> <span class="o">-&gt;</span> <span class="s">&quot;no not again&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">predict</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">={</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">VariableElimination</span><span class="o">.</span><span class="n">probability</span><span class="o">(</span><span class="n">greetingToday</span><span class="o">,</span><span class="s">&quot;Hello World&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Today&#39;s greeting is \&quot;Hello World!\&quot; &quot;</span><span class="o">+</span><span class="s">&quot; with probability &quot;</span><span class="o">+</span> <span class="n">result</span> <span class="o">+</span><span class="s">&quot;.&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">infer</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">greeting</span> <span class="k">=</span> <span class="s">&quot;Hello World&quot;</span>
</span><span class='line'>    <span class="n">greetingToday</span><span class="o">.</span><span class="n">observe</span><span class="o">(</span><span class="n">greeting</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">VariableElimination</span><span class="o">.</span><span class="n">probability</span><span class="o">(</span><span class="n">sunnyToday</span><span class="o">,</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;If today&#39;s greeting is $greeting with probability $result.&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">learnAndPredict</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">={</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">greeting</span> <span class="k">=</span> <span class="s">&quot;Hello World&quot;</span>
</span><span class='line'>    <span class="n">greetingToday</span><span class="o">.</span><span class="n">observe</span><span class="o">(</span><span class="n">greeting</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">VariableElimination</span><span class="o">.</span><span class="n">probability</span><span class="o">(</span><span class="n">greetingTomorrow</span><span class="o">,</span><span class="n">greeting</span><span class="o">)</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;If today&#39;s greeting is $greeting,tomorrow&#39;s greeting will be $greeting\n&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">s</span><span class="s">&quot;with probability $result.&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">predict</span>
</span><span class='line'>    <span class="n">infer</span>
</span><span class='line'>    <span class="n">learnAndPredict</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python科学计算库NumPy的使用]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/07/19/pythonke-xue-ji-suan-ku-numpyde-shi-yong/"/>
    <updated>2017-07-19T19:10:49+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/07/19/pythonke-xue-ji-suan-ku-numpyde-shi-yong</id>
    <content type="html"><![CDATA[<h1>Python科学计算库NumPy的使用</h1>

<h2>NumPy的介绍</h2>

<p>NumPy(Numerical Python的缩写)是一个开源的Python科学计算库。使用NumPy,就可以很自然地使用数组和矩阵。NumPy包含很多实用的数学函数,涵盖线性代数运算、傅里叶变换和随机数生成等功能。如果你的系统中已经装有LAPACK,NumPy的线性代数模块会调用它,否则NumPy将使用自己实现的库函数。LAPACK是一个著名的数值计算库,最初是用Fortran写成的,Matlab同样也需要调用它。从某种意义上讲,NumPy可以取代Matlab和Mathematica的部分功能,并且允许用户进行快速的交互式原型设计。</p>

<h2>NumPy的数组对象</h2>

<p>ndarray是一个多维数组对象，该对象由实际数据+描述性元数据组成。
使用Numpy需要先安装和导入NumPy库，有关安装教程可以参考<a href="https://docs.scipy.org/doc/numpy/user/install.html">Installing NumPy</a></p>

<blockquote><p>导入语法：import numpy as np</p></blockquote>

<p>此处使用np为别名是为了避免命名空间被污染。</p>

<p><strong>特点</strong>：</p>

<ol>
<li>NumPy数组一般是同质（即数组内的元素为相同类型，特殊类型除外）</li>
<li>NumPy数组的下标也是从0开始</li>
<li>可以方便地创建高维数组</li>
</ol>


<p><em>eg：</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: <span class="nv">a</span> <span class="o">=</span> np.arange<span class="o">(</span>5<span class="o">)</span>
</span><span class='line'>In: a.dtype
</span><span class='line'>Out: dtype<span class="o">(</span><span class="s1">&#39;int64&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在32位系统中，得到的结果类型可能是int32。</p>

<p><strong>多维数组的创建</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: <span class="nv">m</span> <span class="o">=</span> np.array<span class="o">([</span>np.arange<span class="o">(</span>2<span class="o">)</span>, np.arange<span class="o">(</span>2<span class="o">)])</span>
</span><span class='line'>In: m
</span><span class='line'>Out:
</span><span class='line'>array<span class="o">([[</span>0, 1<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>0, 1<span class="o">]])</span>
</span><span class='line'>In: m.shape <span class="c">#shape可以输出数组行列（维度）信息</span>
</span><span class='line'>Out: <span class="o">(</span>2, 2<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>选取数组元素</strong>：
我们继续沿用上面创建的数组m</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: m<span class="o">[</span>0,0<span class="o">]</span>
</span><span class='line'>Out: 0
</span><span class='line'>In: m<span class="o">[</span>0,1<span class="o">]</span>
</span><span class='line'>Out: 1
</span></code></pre></td></tr></table></div></figure>


<pre><code>是的,从数组中选取元素就是这么简单。对于数组 a ,只需要用 a[m,n] 选取各数组元素,其中 m 和 n 为元素下标。
</code></pre>

<p><strong>NumPy的数据类型</strong>:
    Python支持的数据类型有整型、浮点型以及复数型,但这些类型不足以满足科学计算的需求,因此NumPy添加了很多其他的数据类型。在NumPy中,许多函数的参数中可以指定数据类型,通常这个参数是可选的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: np.arange<span class="o">(</span>7, <span class="nv">dtype</span><span class="o">=</span>uint16<span class="o">)</span>
</span><span class='line'>Out: array<span class="o">([</span>0, 1, 2, 3, 4, 5, 6<span class="o">]</span>, <span class="nv">dtype</span><span class="o">=</span>uint16<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中完整的数据类型可以通过np.sctypeDict.keys()查到：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dict_keys<span class="o">([</span>0, 1, 2, 3, <span class="s1">&#39;D&#39;</span>, 5, 6, <span class="s1">&#39;ushort&#39;</span>, 8, <span class="s1">&#39;P&#39;</span>, 10, 11, 12, <span class="s1">&#39;uintp&#39;</span>, 14, 15, 16, 17, 18, 19, <span class="s1">&#39;Float16&#39;</span>, 21, 22, 23, <span class="s1">&#39;cfloat&#39;</span>, 4, <span class="s1">&#39;Object0&#39;</span>, <span class="s1">&#39;int32&#39;</span>, <span class="s1">&#39;UInt64&#39;</span>, <span class="s1">&#39;Complex128&#39;</span>, <span class="s1">&#39;uint0&#39;</span>, <span class="s1">&#39;i2&#39;</span>, 7, <span class="s1">&#39;Int16&#39;</span>, <span class="s1">&#39;int&#39;</span>, <span class="s1">&#39;complex&#39;</span>, <span class="s1">&#39;ubyte&#39;</span>, <span class="s1">&#39;Int32&#39;</span>, <span class="s1">&#39;float&#39;</span>, <span class="s1">&#39;i&#39;</span>, <span class="s1">&#39;short&#39;</span>, <span class="s1">&#39;B&#39;</span>, <span class="s1">&#39;str0&#39;</span>, 9, <span class="s1">&#39;complex_&#39;</span>, <span class="s1">&#39;O&#39;</span>, <span class="s1">&#39;long&#39;</span>, <span class="s1">&#39;bytes&#39;</span>, <span class="s1">&#39;float_&#39;</span>, <span class="s1">&#39;Int64&#39;</span>, <span class="s1">&#39;int0&#39;</span>, <span class="s1">&#39;Void0&#39;</span>, <span class="s1">&#39;float128&#39;</span>, <span class="s1">&#39;Float64&#39;</span>, <span class="s1">&#39;Str0&#39;</span>, <span class="s1">&#39;int64&#39;</span>, <span class="s1">&#39;b&#39;</span>, <span class="s1">&#39;longdouble&#39;</span>, <span class="s1">&#39;void&#39;</span>, <span class="s1">&#39;f&#39;</span>, <span class="s1">&#39;longcomplex&#39;</span>, <span class="s1">&#39;ulonglong&#39;</span>, <span class="s1">&#39;intp&#39;</span>, <span class="s1">&#39;UInt32&#39;</span>, <span class="s1">&#39;V&#39;</span>, <span class="s1">&#39;object_&#39;</span>, <span class="s1">&#39;longlong&#39;</span>, <span class="s1">&#39;csingle&#39;</span>, <span class="s1">&#39;uint&#39;</span>, <span class="s1">&#39;c32&#39;</span>, <span class="s1">&#39;M&#39;</span>, <span class="s1">&#39;I&#39;</span>, <span class="s1">&#39;singlecomplex&#39;</span>, <span class="s1">&#39;double&#39;</span>, <span class="s1">&#39;timedelta64&#39;</span>, <span class="s1">&#39;object&#39;</span>, <span class="s1">&#39;unicode_&#39;</span>, <span class="s1">&#39;Float128&#39;</span>, <span class="s1">&#39;uint64&#39;</span>, <span class="s1">&#39;h&#39;</span>, <span class="s1">&#39;str&#39;</span>, <span class="s1">&#39;d&#39;</span>, <span class="s1">&#39;UInt8&#39;</span>, 20, <span class="s1">&#39;complex128&#39;</span>, <span class="s1">&#39;string_&#39;</span>, <span class="s1">&#39;clongfloat&#39;</span>, <span class="s1">&#39;H&#39;</span>, <span class="s1">&#39;m8&#39;</span>, <span class="s1">&#39;clongdouble&#39;</span>, <span class="s1">&#39;S&#39;</span>, <span class="s1">&#39;g&#39;</span>, <span class="s1">&#39;bool_&#39;</span>, <span class="s1">&#39;unicode&#39;</span>, <span class="s1">&#39;f16&#39;</span>, 13, <span class="s1">&#39;int8&#39;</span>, <span class="s1">&#39;void0&#39;</span>, <span class="s1">&#39;L&#39;</span>, <span class="s1">&#39;M8&#39;</span>, <span class="s1">&#39;uint32&#39;</span>, <span class="s1">&#39;p&#39;</span>, <span class="s1">&#39;bytes0&#39;</span>, <span class="s1">&#39;e&#39;</span>, <span class="s1">&#39;datetime64&#39;</span>, <span class="s1">&#39;U&#39;</span>, <span class="s1">&#39;float16&#39;</span>, <span class="s1">&#39;c16&#39;</span>, <span class="s1">&#39;?&#39;</span>, <span class="s1">&#39;Bool&#39;</span>, <span class="s1">&#39;byte&#39;</span>, <span class="s1">&#39;i4&#39;</span>, <span class="s1">&#39;c8&#39;</span>, <span class="s1">&#39;int16&#39;</span>, <span class="s1">&#39;half&#39;</span>, <span class="s1">&#39;uint16&#39;</span>, <span class="s1">&#39;str_&#39;</span>, <span class="s1">&#39;i8&#39;</span>, <span class="s1">&#39;Complex32&#39;</span>, <span class="s1">&#39;Int8&#39;</span>, <span class="s1">&#39;bool&#39;</span>, <span class="s1">&#39;Bytes0&#39;</span>, <span class="s1">&#39;G&#39;</span>, <span class="s1">&#39;l&#39;</span>, <span class="s1">&#39;uint8&#39;</span>, <span class="s1">&#39;f2&#39;</span>, <span class="s1">&#39;single&#39;</span>, <span class="s1">&#39;f8&#39;</span>, <span class="s1">&#39;q&#39;</span>, <span class="s1">&#39;Q&#39;</span>, <span class="s1">&#39;m&#39;</span>, <span class="s1">&#39;Complex64&#39;</span>, <span class="s1">&#39;f4&#39;</span>, <span class="s1">&#39;u2&#39;</span>, <span class="s1">&#39;Float32&#39;</span>, <span class="s1">&#39;i1&#39;</span>, <span class="s1">&#39;u4&#39;</span>, <span class="s1">&#39;Datetime64&#39;</span>, <span class="s1">&#39;intc&#39;</span>, <span class="s1">&#39;float64&#39;</span>, <span class="s1">&#39;a&#39;</span>, <span class="s1">&#39;complex64&#39;</span>, <span class="s1">&#39;u1&#39;</span>, <span class="s1">&#39;bytes_&#39;</span>, <span class="s1">&#39;cdouble&#39;</span>, <span class="s1">&#39;object0&#39;</span>, <span class="s1">&#39;UInt16&#39;</span>, <span class="s1">&#39;bool8&#39;</span>, <span class="s1">&#39;float32&#39;</span>, <span class="s1">&#39;uintc&#39;</span>, <span class="s1">&#39;Timedelta64&#39;</span>, <span class="s1">&#39;F&#39;</span>, <span class="s1">&#39;longfloat&#39;</span>, <span class="s1">&#39;b1&#39;</span>, <span class="s1">&#39;u8&#39;</span>, <span class="s1">&#39;int_&#39;</span>, <span class="s1">&#39;complex256&#39;</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>创建自定义数据类型</strong>：</p>

<p>(1)创建数据类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: <span class="nv">t</span> <span class="o">=</span> np.dtype<span class="o">([(</span><span class="s1">&#39;name&#39;</span>,np.str_,128<span class="o">)</span>,<span class="o">(</span><span class="s1">&#39;count&#39;</span>,np.int32<span class="o">)</span>,<span class="o">(</span><span class="s1">&#39;price&#39;</span>,np.float64<span class="o">)])</span>
</span><span class='line'>In: t
</span><span class='line'>Out: dtype<span class="o">([(</span><span class="s1">&#39;name&#39;</span>, <span class="s1">&#39;&lt;U128&#39;</span><span class="o">)</span>, <span class="o">(</span><span class="s1">&#39;count&#39;</span>, <span class="s1">&#39;&lt;i4&#39;</span><span class="o">)</span>, <span class="o">(</span><span class="s1">&#39;price&#39;</span>, <span class="s1">&#39;&lt;f8&#39;</span><span class="o">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>(2)查看数据类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: t<span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>Out: dtype<span class="o">(</span><span class="s1">&#39;&lt;U128&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(3)使用自定义数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: <span class="nv">itemz</span> <span class="o">=</span> np.array<span class="o">([(</span><span class="s1">&#39;Meaning of life DVD&#39;</span>, 42, 3.14<span class="o">)</span>, <span class="o">(</span><span class="s1">&#39;Butter&#39;</span>, 13, 2.72<span class="o">)]</span>, <span class="nv">dtype</span><span class="o">=</span>t<span class="o">)</span>
</span><span class='line'>In: itemz<span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>Out: <span class="o">(</span><span class="s1">&#39;Butter&#39;</span>, 13, 2.72<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>一维数组的索引和切片</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: <span class="nv">a</span> <span class="o">=</span> np.arange<span class="o">(</span>9<span class="o">)</span>
</span><span class='line'>In: a<span class="o">[</span>3:7<span class="o">]</span>
</span><span class='line'>Out: array<span class="o">([</span>3, 4, 5, 6<span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>多维数组索引和切片</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In： <span class="nv">b</span><span class="o">=</span>np.arange<span class="o">(</span>24<span class="o">)</span>.reshape<span class="o">(</span>2,3,4<span class="o">)</span>
</span><span class='line'>In: b
</span><span class='line'>Out: array<span class="o">([[[</span> 0,  1,  2,  3<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span> 4,  5,  6,  7<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span> 8,  9, 10, 11<span class="o">]]</span>,
</span><span class='line'>
</span><span class='line'>       <span class="o">[[</span>12, 13, 14, 15<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span>16, 17, 18, 19<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span>20, 21, 22, 23<span class="o">]]])</span>
</span><span class='line'>In: b<span class="o">[</span>0,2,1<span class="o">]</span>
</span><span class='line'>Out: 9-
</span><span class='line'><span class="c">#我们还可以这样写,选取第0组的所有元素:</span>
</span><span class='line'>In: b<span class="o">[</span>0,:,:<span class="o">]</span>
</span><span class='line'>Out: array<span class="o">([[</span>
</span><span class='line'>0, 1, 2, 3<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>4, 5, 6, 7<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>8, 9,10,11<span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>同时，b[0,:,:] == b[0,&hellip;]。</em>
更多的多维数组的索引和切片操作可以参考<a href="https://docs.scipy.org/doc/numpy/reference/">NumPy使用手册</a></p>

<p><strong>数组展平</strong>:</p>

<p>(1)ravel</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: b-
</span><span class='line'>Out:
</span><span class='line'>array<span class="o">([[[</span> 0, 1, 2, 3<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 4, 5, 6, 7<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 8, 9,10,11<span class="o">]]</span>,
</span><span class='line'><span class="o">[[</span>12,13,14,15<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>16,17,18,19<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>20,21,22,23<span class="o">]]])</span>
</span><span class='line'>In: b.ravel<span class="o">()</span>
</span><span class='line'>Out:
</span><span class='line'>array<span class="o">([</span> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
</span><span class='line'>17, 18, 19, 20, 21, 22, 23<span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>(2)flatten</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: b.flatten<span class="o">()</span>
</span><span class='line'>Out:
</span><span class='line'>array<span class="o">([</span> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
</span><span class='line'>17, 18, 19, 20, 21, 22, 23<span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>flatten 和 ravel的区别在于：flatten函数会请求分配内存来保存结果，而reval函数只是返回数组的一个视图（view）</p>

<p>(3)改变数组的shape属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: b.shape <span class="o">=</span> <span class="o">(</span>6,4<span class="o">)</span>
</span><span class='line'>In: b
</span><span class='line'>Out:
</span><span class='line'>array<span class="o">([</span> 0, 1, 2, 3<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 4, 5, 6, 7<span class="o">]</span>,-
</span><span class='line'><span class="o">[</span> 8, 9,10,11<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>12,13,14,15<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>16,17,18,19<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>20,21,22,23<span class="o">]]</span>,
</span></code></pre></td></tr></table></div></figure>


<p>(4)transpose,相当与线性代数的转置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: b.transpose<span class="o">()</span>
</span><span class='line'>Out:
</span><span class='line'>array<span class="o">([[</span> 0, 4, 8,12,16,20<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 1, 5, 9,13,17,21<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 2, 6,10,14,18,22<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 3, 7,11,15,19,23<span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>(5)resize，功能和reshape相同，但是resize会直接影响原操作数组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: b.resize<span class="o">((</span>2,12<span class="o">))</span>
</span><span class='line'>In: b
</span><span class='line'>Out:
</span><span class='line'>array<span class="o">([[</span> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>12,13,14,15,16,17,18,19,20,21, 22, 23<span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>数组组合</strong>：</p>

<p>(1)水平组合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: <span class="nv">a</span> <span class="o">=</span> np.arange<span class="o">(</span>9<span class="o">)</span>.reshape<span class="o">(</span>3,3<span class="o">)</span>
</span><span class='line'>In: <span class="nv">b</span><span class="o">=</span>2*a
</span><span class='line'>In: np.hstack<span class="o">((</span>a,b<span class="o">))</span>
</span><span class='line'>Out: array<span class="o">([[</span> 0,  1,  2,  0,  2,  4<span class="o">]</span>,
</span><span class='line'>       <span class="o">[</span> 3,  4,  5,  6,  8, 10<span class="o">]</span>,
</span><span class='line'>       <span class="o">[</span> 6,  7,  8, 12, 14, 16<span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>同样可以使用concatenate函数实现同样效果</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: concatenate<span class="o">((</span>a,b<span class="o">)</span>,axis<span class="o">=</span>1<span class="o">)</span>
</span><span class='line'>Out: array<span class="o">([[</span> 0, 1, 2, 0, 2, 4<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 3, 4, 5, 6, 8,10<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 6, 7, 8,12,14,16<span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>(2)垂直组合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: np.vsta-ck<span class="o">((</span>a,b<span class="o">))</span>
</span><span class='line'>Out: array<span class="o">([[</span> 0,  1,  2<span class="o">]</span>,
</span><span class='line'>   <span class="o">[</span> 3,  4,  5<span class="o">]</span>,
</span><span class='line'>   <span class="o">[</span> 6,  7,  8<span class="o">]</span>,
</span><span class='line'>   <span class="o">[</span> 0,  2,  4<span class="o">]</span>,
</span><span class='line'>   <span class="o">[</span> 6,  8, 10<span class="o">]</span>,
</span><span class='line'>   <span class="o">[</span>12, 14, 16<span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>同样可以使用concatenate函数实现同样效果</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: concatenate<span class="o">((</span>a,b<span class="o">)</span>,axis<span class="o">=</span>0<span class="o">)</span>
</span><span class='line'>Out: In: np.vstack<span class="o">((</span>a,b<span class="o">))</span>
</span><span class='line'>Out: array<span class="o">([[</span> 0,  1,  2<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 3,  4,  5<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 6,  7,  8<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 0,  2,  4<span class="o">]</span>,
</span><span class='line'><span class="o">[</span> 6,  8, 10<span class="o">]</span>,
</span><span class='line'><span class="o">[</span>12, 14, 16<span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>(3)深度组合</p>

<p>深度组合,就是将一系列数组沿着纵轴(深度)方向进行层叠组合。举个例子,有若干张二维平面内的图像点阵数据,我们可以将这些图像数据沿纵轴方向层叠在一起,这就形象地解释了什么是深度组合。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: np.dstack<span class="o">((</span>a,b<span class="o">))</span>
</span><span class='line'>Out: array<span class="o">([[[</span> 0,  0<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span> 1,  2<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span> 2,  4<span class="o">]]</span>,
</span><span class='line'>       <span class="o">[[</span> 3,  6<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span> 4,  8<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span> 5, 10<span class="o">]]</span>,
</span><span class='line'>
</span><span class='line'>       <span class="o">[[</span> 6, 12<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span> 7, 14<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span> 8, 16<span class="o">]]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>(4)列组合,column_stack 函数对于一维数组将按列方向进行组合,而对于二维数组, column_stack 与 hstack 的效果是相同的</p>

<p>(5)行组合,当然,NumPy中也有按行方向进行组合的函数,它就是 row_stack 。对于两
个一维数组,将直接层叠起来组合成一个二维数组。同样，对于二维数组，row_stack 与 vstack 的效果是相同的。</p>

<p><strong>数组分割</strong>:</p>

<p>NumPy数组可以进行水平、垂直或深度分割,相关的函数有 hsplit 、 vsplit 、 dsplit 和split 。我们可以将数组分割成相同大小的子数组,也可以指定原数组中需要分割的位置。</p>

<p>(1)水平分割</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: a
</span><span class='line'>Out: array<span class="o">([[</span>0, 1, 2<span class="o">]</span>,
</span><span class='line'>       <span class="o">[</span>3, 4, 5<span class="o">]</span>,
</span><span class='line'>       <span class="o">[</span>6, 7, 8<span class="o">]])</span>
</span><span class='line'>In: np.hsplit<span class="o">(</span>a,3<span class="o">)</span> <span class="c">#沿水平方向分割成三个大小相同的子数组</span>
</span><span class='line'>Out: <span class="o">[</span>array<span class="o">([[</span>0<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span>3<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span>6<span class="o">]])</span>, array<span class="o">([[</span>1<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span>4<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span>7<span class="o">]])</span>, array<span class="o">([[</span>2<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span>5<span class="o">]</span>,
</span><span class='line'>        <span class="o">[</span>8<span class="o">]])]</span>
</span></code></pre></td></tr></table></div></figure>


<p>(2)垂直分割</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: np.vsplit<span class="o">(</span>a,3<span class="o">)</span> <span class="c">#在垂直方向上分割成三个大小相同的子数组</span>
</span><span class='line'>Out： <span class="o">[</span>array<span class="o">([[</span>0, 1, 2<span class="o">]])</span>, array<span class="o">([[</span>3, 4, 5<span class="o">]])</span>, array<span class="o">([[</span>6, 7, 8<span class="o">]])]</span>
</span></code></pre></td></tr></table></div></figure>


<p>(3)深度分割,dsplit函数将按深度方向分割数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>In: np.dsplit<span class="o">(</span>np.arange<span class="o">(</span>27<span class="o">)</span>.reshape<span class="o">(</span>3,3,3<span class="o">)</span>,3<span class="o">)</span>
</span><span class='line'>Out: <span class="o">[</span>array<span class="o">([[[</span> 0<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span> 3<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span> 6<span class="o">]]</span>,
</span><span class='line'>
</span><span class='line'>        <span class="o">[[</span> 9<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>12<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>15<span class="o">]]</span>,
</span><span class='line'>
</span><span class='line'>        <span class="o">[[</span>18<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>21<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>24<span class="o">]]])</span>, array<span class="o">([[[</span> 1<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span> 4<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span> 7<span class="o">]]</span>,
</span><span class='line'>
</span><span class='line'>        <span class="o">[[</span>10<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>13<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>16<span class="o">]]</span>,
</span><span class='line'>
</span><span class='line'>        <span class="o">[[</span>19<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>22<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>25<span class="o">]]])</span>, array<span class="o">([[[</span> 2<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span> 5<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span> 8<span class="o">]]</span>,
</span><span class='line'>
</span><span class='line'>        <span class="o">[[</span>11<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>14<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>17<span class="o">]]</span>,
</span><span class='line'>
</span><span class='line'>        <span class="o">[[</span>20<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>23<span class="o">]</span>,
</span><span class='line'>         <span class="o">[</span>26<span class="o">]]])]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>同时，hsplit,vsplit同样也可以用函数split来实现，其使用就像上面的数组组合函数concatenate类似</em></p>

<p><strong>到此，NumPy的常规的数组操作基本就结束了！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有统计学的一些笔记]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/07/14/you-tong-ji-xue-de-yi-xie-bi-ji/"/>
    <updated>2017-07-14T13:22:09+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/07/14/you-tong-ji-xue-de-yi-xie-bi-ji</id>
    <content type="html"><![CDATA[<h1>有关推断统计学</h1>

<h2>样本与总体</h2>

<p>在统计中，一个<strong>总体</strong>包括事件的全部，而一个<strong>样本</strong>是总体的一小部分（子集）
。</p>

<h2>推断统计学</h2>

<p><strong>推断统计学（Inferential statistics）</strong> 是使用样本归纳总体的一种统计方法。推断统计非常有用，因为他允许我们基于有限的信息（样本）对总体得出结论。</p>

<h2>假设检验</h2>

<p>当我们使用样本对总体进行推断时，这个过程为假设检验（Hypothesis testing）。在假设检验中，通常要陈述两个假设：<strong>原假设（null hypothesis）</strong> 和<strong>对立假设（alternative hypothesis）</strong>。原假设通常陈述处理没有效果，而对立假设陈述处理有效果。</p>

<h2>单边检验和双边检验</h2>

<p>在评估处理要看是否对任一方向有影响（了解得分是更高还是更低）时使用双边检验，而在母的仅仅是调查单一方向（仅仅是更高还是更低）时使用单边检验。</p>

<h2>第一类错误和第二类错误</h2>

<p>在假设检验中，使用样本对总体进行推断。因为样本是总体的不完整“图像”，所以在假设检验过程中，就可能有错误。有两类错误发生：第一类错误，第二类错误。如果在原假设是真实的情况下拒绝了原假设，就发生了第一类错误。如果在原假设是错误的情况下没有拒绝原假设，就发生了第二类错误。</p>

<h2>功效</h2>

<p><strong>功效（power）</strong>等于原假设错误的拒绝原假设的概率（如果原假设是错误的，他也是被拒绝的，就是做了一个正确的决策）。功效的取值范围在0~1之间，数值越大，功效越大。</p>

<h2>抽样误差</h2>

<p>一般来说，样本越小，样本与总体的差异就越大。样本与总体的差异就是<strong>抽样误差（sampling error）</strong></p>

<h2>p-值</h2>

<p>如果从总体中抽取的样本通常都是不相同的，那么我们应该如何确定样本之间存在有意义的差异，还是由于抽样误差所导致的结果。p-值表明在原假设为真时获得特定结果的的概率。在假设检验中，检验的p-值是和预先确定的数值进行比较的，且基于比较的结果，对原假设进行决策。在社会和行为科学中，常用0.05位水平，来评价p-值。</p>

<blockquote><p>评价p-值过程如下：
1. 如果p-值小于或等于0.05（α），拒绝原假设（假定策略之间存在差异）
2. 如果p-值大于0.05（α），不能拒绝原假设（没有假定策略之间有差异）</p></blockquote>

<h2>效应量</h2>

<p><strong>效应量（effect sizes）</strong>一般用来描述策略组之间的差异程度，表明我们研究结果的大小。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贝叶斯算法在检测群聊垃圾广告中的应用]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/07/03/bei-xie-si-suan-fa-zai-jian-ce-qun-liao-la-ji-yan-gao-zhong-de-ying-yong/"/>
    <updated>2017-07-03T12:18:45+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/07/03/bei-xie-si-suan-fa-zai-jian-ce-qun-liao-la-ji-yan-gao-zhong-de-ying-yong</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 背景：</a></li>
<li><a href="#sec-2">2. 基本原理：</a></li>
<li><a href="#sec-3">3. 联合概率计算</a></li>
<li><a href="#sec-4">4. 算法实现</a></li>
</ul>
</div>
</div>


<h1>贝叶斯算法在检测群聊垃圾广告中的应用</h1>

<h1>背景：<a id="sec-1" name="sec-1"></a></h1>

<p>贝叶斯过滤器是一种基于统计学的过滤器方法，是建立在已有的统计结果之上的，所以在实现算法
之前需要先建立历史资料库，即，先提供两组已经标注好的训练数据。
在此附上训练数据链接：<a href="https://pan.baidu.com/s/1nuGW2Ul">https://pan.baidu.com/s/1nuGW2Ul</a></p>

<h1>基本原理：<a id="sec-2" name="sec-2"></a></h1>

<p>当看到一段文本时，我们先假定它是广告文本的概率为50%，其实整个识别模式就像垃圾邮件过滤
一样，我们先用S来表示垃圾文本，用H来表示正常文本。因此，P(S)和 P(H)的先验概率都是
50%：</p>

<p>$ P(S) = P(H) = 50% $</p>

<p>然后我们再对其进行分词解析处理，我们用W来表示其中存在的某个关键词，然后问题就转变成了在
某个词语W存在的情况之下，目标文本为垃圾文本的可能性有多大？而解决这个问题的关键就是计算
P（S|W）的值。根据条件概率公式我们可以写出以下等式。</p>

<p>$ P(S|W) = P(W|S)P(S)/(P(W|S)P(S)+P(W|H)P(H)) $</p>

<p>公式之中，P(W|S)和P(W|H)分别代表在正常文本和垃圾文本之中，词语W出现的概率，而这个概率
我们可以根据已经标注的好训练数据中计算得出。这里，我们假设对于词语W来说，上面所提到的两个
概率分别为5%和0.05%，那么我们可以计算出P(S|W)＝ 99.0%</p>

<p>因此，根据我们得出的99%的后验概率，我们可以说词语W的推断能力很强，在垃圾文本和正常文本之
中有十分良好的推断效果。</p>

<h1>联合概率计算<a id="sec-3" name="sec-3"></a></h1>

<p>但是，一段文本中存在非常多的词汇，我们不能单凭一个单词就推断出这段文本的分类属性。因此，
常规的做法是我们需要选取出整段文本中，P(S|W)最高的15个词，然后计算它们的联合概率。
（其中可能存在的问题有：某些新词在历史数据中都不曾出现过，我们无法计算其P(S|W)的值，
对于这样的问题需要用到贝叶斯平滑的思想进行处理，本文为了从简，我们都先假设这类词的P(S|W)
值为0.4）</p>

<p>对于联合概率的补充解释：联合概率是指在多个事件发生的情况之下，另一个发生的概率有多大。
例如：已知，W<sub>1</sub> 和 W<sub>2</sub>为两个不同的词语，它们都出现在某段文本之中，那么这段文本为广告
文本的概率就是W<sub>1</sub>和W<sub>2</sub>的联合概率。</p>

<p>最后，根据提取的15个词，得出最终的概率计算公式</p>

<p>$ P ＝ P<sub>1</sub>P<sub>2</sub>P<sub>3</sub>&#x2026;P<sub>15</sub>/(P<sub>1</sub>P<sub>2</sub>&#x2026;P<sub>15</sub>+(1-P<sub>1</sub>)(1-P<sub>2</sub>)&#x2026;(1-P<sub>15</sub>)) $</p>

<p>在得出最后的概率后，再对阈值（门槛值）进行比较，如：0.9,若 > 0.9 则15个词联合
认定为90%为垃圾文本！</p>

<h1>算法实现<a id="sec-4" name="sec-4"></a></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#encoding=utf-8</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pickle</span>
</span><span class='line'><span class="c">#spam类对象</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jieba</span><span class="p">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">spamEmailBayes</span><span class="p">:</span>
</span><span class='line'>    <span class="c">#获得停用词表</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getStopWords</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">stopList</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;../data/stopwords&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">stopList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stopList</span><span class="p">;</span>
</span><span class='line'>    <span class="c">#获得词典</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_word_list</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">content</span><span class="p">,</span><span class="n">wordsList</span><span class="p">,</span><span class="n">stopList</span><span class="p">):</span>
</span><span class='line'>        <span class="c">#分词结果放入res_list</span>
</span><span class='line'>        <span class="n">res_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">content</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">res_list</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stopList</span> <span class="ow">and</span> <span class="n">i</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">!=</span><span class="s">&#39;&#39;</span> <span class="ow">and</span> <span class="n">i</span><span class="o">!=</span><span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">wordsList</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">wordsList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#若列表中的词已在词典中，则加1，否则添加进去</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">addToDict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">wordsList</span><span class="p">,</span><span class="n">wordsDict</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">wordsList</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">wordsDict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>                <span class="n">wordsDict</span><span class="p">[</span><span class="n">item</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">wordsDict</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">item</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_File_List</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">filePath</span><span class="p">):</span>
</span><span class='line'>        <span class="n">filenames</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">filePath</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">filenames</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#通过计算每个文件中p(s|w)来得到对分类影响最大的15个词</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getTestWords</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">testDict</span><span class="p">,</span><span class="n">spamDict</span><span class="p">,</span><span class="n">normDict</span><span class="p">,</span><span class="n">normFilelen</span><span class="p">,</span><span class="n">spamFilelen</span><span class="p">):</span>
</span><span class='line'>        <span class="n">wordProbList</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">word</span><span class="p">,</span><span class="n">num</span>  <span class="ow">in</span> <span class="n">testDict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">spamDict</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span> <span class="ow">and</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">normDict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>                <span class="c">#该文件中包含词个数</span>
</span><span class='line'>                <span class="n">pw_s</span><span class="o">=</span><span class="n">spamDict</span><span class="p">[</span><span class="n">word</span><span class="p">]</span><span class="o">/</span><span class="n">spamFilelen</span>
</span><span class='line'>                <span class="n">pw_n</span><span class="o">=</span><span class="n">normDict</span><span class="p">[</span><span class="n">word</span><span class="p">]</span><span class="o">/</span><span class="n">normFilelen</span>
</span><span class='line'>                <span class="n">ps_w</span><span class="o">=</span><span class="n">pw_s</span><span class="o">/</span><span class="p">(</span><span class="n">pw_s</span><span class="o">+</span><span class="n">pw_n</span><span class="p">)</span>
</span><span class='line'>                <span class="n">wordProbList</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="n">ps_w</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">spamDict</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span> <span class="ow">and</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">normDict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>                <span class="n">pw_s</span><span class="o">=</span><span class="n">spamDict</span><span class="p">[</span><span class="n">word</span><span class="p">]</span><span class="o">/</span><span class="n">spamFilelen</span>
</span><span class='line'>                <span class="n">pw_n</span><span class="o">=</span><span class="mf">0.01</span>
</span><span class='line'>                <span class="n">ps_w</span><span class="o">=</span><span class="n">pw_s</span><span class="o">/</span><span class="p">(</span><span class="n">pw_s</span><span class="o">+</span><span class="n">pw_n</span><span class="p">)</span>
</span><span class='line'>                <span class="n">wordProbList</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="n">ps_w</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">spamDict</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span> <span class="ow">and</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">normDict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>                <span class="n">pw_s</span><span class="o">=</span><span class="mf">0.01</span>
</span><span class='line'>                <span class="n">pw_n</span><span class="o">=</span><span class="n">normDict</span><span class="p">[</span><span class="n">word</span><span class="p">]</span><span class="o">/</span><span class="n">normFilelen</span>
</span><span class='line'>                <span class="n">ps_w</span><span class="o">=</span><span class="n">pw_s</span><span class="o">/</span><span class="p">(</span><span class="n">pw_s</span><span class="o">+</span><span class="n">pw_n</span><span class="p">)</span>
</span><span class='line'>                <span class="n">wordProbList</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="n">ps_w</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">spamDict</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span> <span class="ow">and</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">normDict</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>                <span class="c">#若该词不在脏词词典中，概率设为0.4</span>
</span><span class='line'>                <span class="n">wordProbList</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="mf">0.4</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">sorted</span><span class="p">(</span><span class="n">wordProbList</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">d</span><span class="p">:</span><span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">:</span><span class="mi">15</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">wordProbList</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#计算贝叶斯概率</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">calBayes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">wordList</span><span class="p">,</span><span class="n">spamdict</span><span class="p">,</span><span class="n">normdict</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ps_w</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'>        <span class="n">ps_n</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">word</span><span class="p">,</span><span class="n">prob</span> <span class="ow">in</span> <span class="n">wordList</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">word</span><span class="o">+</span><span class="s">&quot;/&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">prob</span><span class="p">))</span>
</span><span class='line'>            <span class="n">ps_w</span><span class="o">*=</span><span class="p">(</span><span class="n">prob</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ps_n</span><span class="o">*=</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">prob</span><span class="p">)</span>
</span><span class='line'>        <span class="n">p</span><span class="o">=</span><span class="n">ps_w</span><span class="o">/</span><span class="p">(</span><span class="n">ps_w</span><span class="o">+</span><span class="n">ps_n</span><span class="p">)</span>
</span><span class='line'><span class="c">#         print(str(ps_w)+&quot;////&quot;+str(ps_n))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#计算预测结果正确率</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">calAccuracy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">testResult</span><span class="p">):</span>
</span><span class='line'>        <span class="n">rightCount</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>        <span class="n">errorCount</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">name</span> <span class="p">,</span><span class="n">catagory</span> <span class="ow">in</span> <span class="n">testResult</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">1000</span> <span class="ow">and</span> <span class="n">catagory</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="ow">or</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1000</span> <span class="ow">and</span> <span class="n">catagory</span><span class="o">==</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>                <span class="n">rightCount</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">errorCount</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">rightCount</span><span class="o">/</span><span class="p">(</span><span class="n">rightCount</span><span class="o">+</span><span class="n">errorCount</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">spam</span><span class="o">=</span><span class="n">spamEmailBayes</span><span class="p">()</span>
</span><span class='line'><span class="c">#保存词频的词典</span>
</span><span class='line'><span class="n">spamDict</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">normDict</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">testDict</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="c">#保存每封邮件中出现的词</span>
</span><span class='line'><span class="n">wordsList</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'><span class="n">wordsDict</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="c">#保存预测结果,key为文件名，值为预测类别</span>
</span><span class='line'><span class="n">testResult</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="c">#分别获得正常邮件、垃圾邮件及测试文件名称列表</span>
</span><span class='line'><span class="n">normFileList</span><span class="o">=</span><span class="n">spam</span><span class="o">.</span><span class="n">get_File_List</span><span class="p">(</span><span class="s">&quot;../data/normal&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">spamFileList</span><span class="o">=</span><span class="n">spam</span><span class="o">.</span><span class="n">get_File_List</span><span class="p">(</span><span class="s">&quot;../data/spam&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">testFileList</span><span class="o">=</span><span class="n">spam</span><span class="o">.</span><span class="n">get_File_List</span><span class="p">(</span><span class="s">&quot;../data/test2&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c">#获取训练集中正常邮件与垃圾邮件的数量</span>
</span><span class='line'><span class="n">normFilelen</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">normFileList</span><span class="p">)</span>
</span><span class='line'><span class="n">spamFilelen</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">spamFileList</span><span class="p">)</span>
</span><span class='line'><span class="c">#获得停用词表，用于对停用词过滤</span>
</span><span class='line'><span class="n">stopList</span><span class="o">=</span><span class="n">spam</span><span class="o">.</span><span class="n">getStopWords</span><span class="p">()</span>
</span><span class='line'><span class="c">#获得正常邮件中的词频</span>
</span><span class='line'><span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">normFileList</span><span class="p">:</span>
</span><span class='line'>    <span class="n">wordsList</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;../data/normal/&quot;</span><span class="o">+</span><span class="n">fileName</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">&#39;gbk&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="c">#过滤掉非中文字符</span>
</span><span class='line'>        <span class="n">rule</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;[^\u4e00-\u9fa5]&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">line</span><span class="o">=</span><span class="n">rule</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>        <span class="c">#将每封邮件出现的词保存在wordsList中</span>
</span><span class='line'>        <span class="n">spam</span><span class="o">.</span><span class="n">get_word_list</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="n">wordsList</span><span class="p">,</span><span class="n">stopList</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#统计每个词在所有邮件中出现的次数</span>
</span><span class='line'>    <span class="n">spam</span><span class="o">.</span><span class="n">addToDict</span><span class="p">(</span><span class="n">wordsList</span><span class="p">,</span> <span class="n">wordsDict</span><span class="p">)</span>
</span><span class='line'><span class="n">normDict</span><span class="o">=</span><span class="n">wordsDict</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;norm.pkl&#39;</span><span class="p">,</span><span class="s">&#39;wb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">normDict</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">output</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#获得垃圾邮件中的词频</span>
</span><span class='line'><span class="n">wordsDict</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">spamFileList</span><span class="p">:</span>
</span><span class='line'>    <span class="n">wordsList</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;../data/spam/&quot;</span><span class="o">+</span><span class="n">fileName</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">&#39;gbk&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">rule</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;[^\u4e00-\u9fa5]&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">line</span><span class="o">=</span><span class="n">rule</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spam</span><span class="o">.</span><span class="n">get_word_list</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="n">wordsList</span><span class="p">,</span><span class="n">stopList</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spam</span><span class="o">.</span><span class="n">addToDict</span><span class="p">(</span><span class="n">wordsList</span><span class="p">,</span> <span class="n">wordsDict</span><span class="p">)</span>
</span><span class='line'><span class="n">spamDict</span><span class="o">=</span><span class="n">wordsDict</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;spam.pkl&#39;</span><span class="p">,</span><span class="s">&#39;wb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">spamDict</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">output</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;model.pkl&#39;</span><span class="p">,</span><span class="s">&#39;wb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">spam</span><span class="p">,</span><span class="n">output</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">output</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 测试邮件</span>
</span><span class='line'><span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">testFileList</span><span class="p">:</span>
</span><span class='line'>    <span class="n">testDict</span><span class="o">.</span><span class="n">clear</span><span class="p">(</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">wordsDict</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="n">wordsList</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;../data/test2/&quot;</span><span class="o">+</span><span class="n">fileName</span><span class="p">):</span>
</span><span class='line'>    <span class="c">#for line in open(&quot;../data/test/&quot;+fileName,encoding=&#39;gbk&#39;):</span>
</span><span class='line'>        <span class="n">rule</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;[^\u4e00-\u9fa5]&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">line</span><span class="o">=</span><span class="n">rule</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>        <span class="n">spam</span><span class="o">.</span><span class="n">get_word_list</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="n">wordsList</span><span class="p">,</span><span class="n">stopList</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spam</span><span class="o">.</span><span class="n">addToDict</span><span class="p">(</span><span class="n">wordsList</span><span class="p">,</span> <span class="n">wordsDict</span><span class="p">)</span>
</span><span class='line'>    <span class="n">testDict</span><span class="o">=</span><span class="n">wordsDict</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="c">#通过计算每个文件中p(s|w)来得到对分类影响最大的15个词</span>
</span><span class='line'>    <span class="n">wordProbList</span><span class="o">=</span><span class="n">spam</span><span class="o">.</span><span class="n">getTestWords</span><span class="p">(</span><span class="n">testDict</span><span class="p">,</span> <span class="n">spamDict</span><span class="p">,</span><span class="n">normDict</span><span class="p">,</span><span class="n">normFilelen</span><span class="p">,</span><span class="n">spamFilelen</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#对每封邮件得到的15个词计算贝叶斯概率</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span><span class="n">spam</span><span class="o">.</span><span class="n">calBayes</span><span class="p">(</span><span class="n">wordProbList</span><span class="p">,</span> <span class="n">spamDict</span><span class="p">,</span> <span class="n">normDict</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">&gt;</span><span class="mf">0.9</span><span class="p">):</span>
</span><span class='line'>        <span class="n">testResult</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">testResult</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c">#计算分类准确率（测试集中文件名低于1000的为正常邮件）</span>
</span><span class='line'><span class="n">testAccuracy</span><span class="o">=</span><span class="n">spam</span><span class="o">.</span><span class="n">calAccuracy</span><span class="p">(</span><span class="n">testResult</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">ic</span> <span class="ow">in</span> <span class="n">testResult</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="s">&quot;/&quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">ic</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">testAccuracy</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python大规模数据的处理技巧]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/06/07/pythonda-gui-mo-shu-ju-de-chu-li-ji-qiao/"/>
    <updated>2017-06-07T13:43:01+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/06/07/pythonda-gui-mo-shu-ju-de-chu-li-ji-qiao</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 问题一：大数据量的csv读入到内存中</a>
<ul>
<li><a href="#sec-1-1">1.1. 问题分析：</a></li>
<li><a href="#sec-1-2">1.2. 应对思路：</a></li>
<li><a href="#sec-1-3">1.3. 简易示例：</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 问题二：如何高效读取csv文件成python内部的list结构</a>
<ul>
<li><a href="#sec-2-1">2.1. 问题分析：</a></li>
<li><a href="#sec-2-2">2.2. 应对思路：</a></li>
<li><a href="#sec-2-3">2.3. 简易示例：</a></li>
</ul>
</li>
<li><a href="#sec-3">3. 问题三：数据结构之间合并</a>
<ul>
<li><a href="#sec-3-1">3.1. 问题分析：</a></li>
<li><a href="#sec-3-2">3.2. 应对思路：</a></li>
<li><a href="#sec-3-3">3.3. 简易示例：</a></li>
</ul>
</li>
</ul>
</div>
</div>


<p>目前在数据分析和挖掘领域内，最为热门的莫过于Python和R了，不过这两门语言一直因为不好处理大规模的数据而被人们调侃，
同时，hadoop和spark也因此应运而生。然而，其实Python在大规模的数据处理上也并非像传言所说的那么慢。甚者，其中也蕴含了
挺多的技巧让我们能够利用Python对大规模的数据进行分析计算。</p>

<p>下面就Python操作大规模数据时可能会遇到的问题，给出一些个人的见解。</p>

<h1>问题一：大数据量的csv读入到内存中<a id="sec-1" name="sec-1"></a></h1>

<h2>问题分析：<a id="sec-1-1" name="sec-1-1"></a></h2>

<p>当一个csv文件的数据量十分大时，例如，一个电商站点的一个月的流水帐单或交易记录，其中可能有高达几千万条至上亿条
记录文本。这样的文件对于一般性能的计算机来说，若是全部数据一次读入内存的存储就非常吃力了，甚至有崩溃的可能。</p>

<h2>应对思路：<a id="sec-1-2" name="sec-1-2"></a></h2>

<p>这时一个比较明智的方法就是将这些数据全部读入数据库之中，或者是根据我们的实际数据使用情况将大文件拆分成小块，然后
再按块读入。</p>

<h2>简易示例：<a id="sec-1-3" name="sec-1-3"></a></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#使用pandas包的最简示例</span>
</span><span class='line'> <span class="n">chunker</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">PATH_LOAD</span><span class="p">,</span> <span class="n">chunksize</span> <span class="o">=</span> <span class="n">CHUNK_SIZE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#按列按需读取</span>
</span><span class='line'>  <span class="n">columns</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;date_time&quot;</span><span class="p">,</span>  <span class="s">&quot;user_id&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">chunks_train</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">usecols</span> <span class="o">=</span> <span class="n">columns</span><span class="p">,</span> <span class="n">chunksize</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#分块分行读取</span>
</span><span class='line'><span class="k">for</span> <span class="n">rawPiece</span> <span class="ow">in</span> <span class="n">chunker_rawData</span><span class="p">:</span>
</span><span class='line'>  <span class="n">current_chunk_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">rawPiece</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>   <span class="c">#rawPiece 是dataframe</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">current_chunk_size</span> <span class="p">):</span>
</span><span class='line'>    <span class="n">timeFlag</span> <span class="o">=</span> <span class="n">timeShape</span><span class="p">(</span><span class="n">rawPiece</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>   <span class="c">#获取第i行的数据</span>
</span></code></pre></td></tr></table></div></figure>


<h1>问题二：如何高效读取csv文件成python内部的list结构<a id="sec-2" name="sec-2"></a></h1>

<h2>问题分析：<a id="sec-2-1" name="sec-2-1"></a></h2>

<p>当仅仅需要对外部大规模的csv做一些的简单的求和，求平均值，等简单的统计描述性分析时，使用pandas包显然是不明智的，因为pd
的读取中包含了各种抽象的转换操作，一但数据规模较大，性能是十分低下的。</p>

<h2>应对思路：<a id="sec-2-2" name="sec-2-2"></a></h2>

<p>这时应该直接采用python原生的IO读写操作，节省那些多此一举的转换操作。</p>

<h2>简易示例：<a id="sec-2-3" name="sec-2-3"></a></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#使用pandas包的方法，转换操作多，效率低下。</span>
</span><span class='line'>    <span class="n">userList</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">content</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">content</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">ix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">userList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#直接使用原生操作读取外部数据，效率较高，但数据操作不及pandas方便</span>
</span><span class='line'>    <span class="n">userList</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">content</span><span class="p">:</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">userList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>问题三：数据结构之间合并<a id="sec-3" name="sec-3"></a></h1>

<h2>问题分析：<a id="sec-3-1" name="sec-3-1"></a></h2>

<p>当你要对一组数据特征进行建模时，就要用到数据结构的合并功能了。
然而，对于大规模数据来说，任何的操作和合并如何采用的方法不当，其要浪费的时间都是十分致命的。</p>

<h2>应对思路：<a id="sec-3-2" name="sec-3-2"></a></h2>

<p>纵向的合并使用list并不好，因为需要去拆解list的每一个行元素，并用extend去拓展每一行的纵向元素
最好使用dataframe中的concat函数：c = pd.concat([a, b], axis = 1)，当axis=0时表示合并行（以行为轴）</p>

<h2>简易示例：<a id="sec-3-3" name="sec-3-3"></a></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">inx1</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">nSample_neg</span><span class="p">),</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;randVal&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">inx2</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">nSample_neg</span><span class="p">),</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;inxVal&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">inx</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">inx1</span><span class="p">,</span> <span class="n">inx2</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Redis的Bloomfilter]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/05/21/ji-yu-redisde-bloomfilter/"/>
    <updated>2017-05-21T11:05:15+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/05/21/ji-yu-redisde-bloomfilter</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 背景</a></li>
<li><a href="#sec-2">2. 前言及原理简介</a>
<ul>
<li><a href="#sec-2-1">2.1. 传统弊端</a></li>
<li><a href="#sec-2-2">2.2. bloomfilter</a>
<ul>
<li><a href="#sec-2-2-1">2.2.1. 优点：</a></li>
<li><a href="#sec-2-2-2">2.2.2. 缺点：</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-3">3. 简单图示</a></li>
<li><a href="#sec-4">4. 算法实现</a></li>
</ul>
</div>
</div>


<h1>背景<a id="sec-1" name="sec-1"></a></h1>

<p>url去重一直是大型分布式爬虫的主题，在一般规模比较大的的情景，去重需要考虑到两个点：</p>

<ol>
<li>去重的数据量</li>
<li>去重的速度</li>
</ol>


<p>并且，在一般情况下为了尽量降低去重对爬虫效率的影响一般选择在内存中去重。</p>

<ul>
<li>小数据：直接使用语言的逻辑判断及数据结构去重，如python的set，ruby的Set</li>
<li>持续化去重： redis的set</li>
<li>中型数据量去重：加密算法压缩url及长字符串在混合使用其他方法去重</li>
<li>大型数据去重：使用bloomfilter（布隆过滤器）桉内存位去重</li>
</ul>


<h1>前言及原理简介<a id="sec-2" name="sec-2"></a></h1>

<h2>传统弊端<a id="sec-2-1" name="sec-2-1"></a></h2>

<p>按照以往惯例来说，我们一般判断一个元素是否在一个集合内的通常做法是：先将所有元素保存下来，
然后通过比较判断它是否在集合之中。但是，这样的常规判断方法有一个很大的弊端就是，随着集合内的
元素个数变大，我们需要的空间和时间都呈线性增长，检索速度也越来越慢。</p>

<h2>bloomfilter<a id="sec-2-2" name="sec-2-2"></a></h2>

<p>而Bloom filter 采用的是哈希函数的方法，将一个元素表示为一个点并将他映射到一个长度为m的
阵列上。在检索时如果在阵列上发现对应的映射点为1时，那么这个元素在集合内，反之则不在集合内。</p>

<h3>优点：<a id="sec-2-2-1" name="sec-2-2-1"></a></h3>

<p>Bloom filter 优点在于它的插入和查询时间都是常数，另外它查询的元素不保存元素本身，具有良好的
安全性。</p>

<h3>缺点：<a id="sec-2-2-2" name="sec-2-2-2"></a></h3>

<p>最明显的一点是，当插入元素越多，查询元素被错判成“在集合内”的概率就越大。针对这个问题常用的
解决方法有：使用k个哈希函数来对应映射k个点，如果所对应的所有点都是1的话。那么元素在集合内，
如果任何一个有0的话，则元素不在集合内。另外，Bloom filter也不能删除一个元素，因为多个元素的哈希
的结果可能在bloom filter的阵列中都是占用同一个位。如果删除了一个比特位，可能会影响多个元素的检测。</p>

<h1>简单图示<a id="sec-3" name="sec-3"></a></h1>

<p>实现我们设我们的哈希函数有两个。</p>

<p>开始时集合内没有元素：</p>

<p><img src="http://e.hiphotos.baidu.com/baike/s%3D250/sign=0fd8813a78f0f736dcfe4b043a54b382/7af40ad162d9f2d3f39093aaa9ec8a136227ccf6.jpg" alt="img" /></p>

<p>当来了一个元素a时，进行哈希计算再判断，当计算出对应的比特位上为0时，即a不在集合内，添加a的哈希值进去。</p>

<p><img src="http://g.hiphotos.baidu.com/baike/s%3D250/sign=7debb7818c1001e94a3c130a880e7b06/9d82d158ccbf6c815e2dd280bd3eb13533fa4044.jpg" alt="img" /></p>

<p>之后的元素，要判断是不是在集合内，也是同 a 一样的方法，只有对元素哈希后对应位置上都是 1 才认为这个元素在集合内</p>

<p><img src="http://c.hiphotos.baidu.com/baike/s%3D250/sign=71f00574a18b87d65442ac1a37092860/d6ca7bcb0a46f21f7ce5e916f6246b600d33aea6.jpg" alt="img" /></p>

<p>随着元素的插入，Bloom filter 中修改的值变多，出现误判的几率也随之变大，当新来一个元素时，
满足其在集合内的条件，即所有对应位都是1，这样就可能有两种情况，
一是这个元素就在集合内，没有发生误判；还有一种情况就是发生误判，出现了哈希碰撞，这个元素本不在集合内。</p>

<p><img src="http://a.hiphotos.baidu.com/baike/s%3D250/sign=7dd68ea2912397ddd2799f016983b216/2cf5e0fe9925bc31448eb6dd5edf8db1ca1370a7.jpg" alt="img" /></p>

<h1>算法实现<a id="sec-4" name="sec-4"></a></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># encoding=utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">redis</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SimpleHash</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cap</span><span class="p">,</span> <span class="n">seed</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cap</span> <span class="o">=</span> <span class="n">cap</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">seed</span> <span class="o">=</span> <span class="n">seed</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hash</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)):</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">seed</span> <span class="o">*</span> <span class="n">ret</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cap</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BloomFilter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">6379</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">blockNum</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="s">&#39;bloomfilter&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        :param host: the host of Redis</span>
</span><span class='line'><span class="sd">        :param port: the port of Redis</span>
</span><span class='line'><span class="sd">        :param db: witch db in Redis</span>
</span><span class='line'><span class="sd">        :param blockNum: one blockNum for about 90,000,000; if you have more strings for filtering, increase it.</span>
</span><span class='line'><span class="sd">        :param key: the key&#39;s name in Redis</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="n">redis</span><span class="o">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="n">db</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bit_size</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span>  <span class="c"># Redis的String类型最大容量为512M，现使用256M</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">seeds</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">61</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">blockNum</span> <span class="o">=</span> <span class="n">blockNum</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hashfunc</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">seed</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">seeds</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">hashfunc</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">SimpleHash</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">bit_size</span><span class="p">,</span> <span class="n">seed</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">isContains</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">str_input</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">str_input</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">m5</span> <span class="o">=</span> <span class="n">md5</span><span class="p">()</span>
</span><span class='line'>        <span class="n">m5</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">str_input</span><span class="p">)</span>
</span><span class='line'>        <span class="n">str_input</span> <span class="o">=</span> <span class="n">m5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">str_input</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">blockNum</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">hashfunc</span><span class="p">:</span>
</span><span class='line'>            <span class="n">loc</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">str_input</span><span class="p">)</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span> <span class="o">&amp;</span> <span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">getbit</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">loc</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ret</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">str_input</span><span class="p">):</span>
</span><span class='line'>        <span class="n">m5</span> <span class="o">=</span> <span class="n">md5</span><span class="p">()</span>
</span><span class='line'>        <span class="n">m5</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">str_input</span><span class="p">)</span>
</span><span class='line'>        <span class="n">str_input</span> <span class="o">=</span> <span class="n">m5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>        <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">str_input</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">blockNum</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">hashfunc</span><span class="p">:</span>
</span><span class='line'>            <span class="n">loc</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">hash</span><span class="p">(</span><span class="n">str_input</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">server</span><span class="o">.</span><span class="n">setbit</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">loc</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot; 第一次运行时会显示 not exists!，之后再运行会显示 exists! &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">bf</span> <span class="o">=</span> <span class="n">BloomFilter</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">bf</span><span class="o">.</span><span class="n">isContains</span><span class="p">(</span><span class="s">&#39;http://www.baidu.com&#39;</span><span class="p">):</span>   <span class="c"># 判断字符串是否存在</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;exists!&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;not exists!&#39;</span>
</span><span class='line'>        <span class="n">bf</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="s">&#39;http://www.baidu.com&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基本抽样和蓄水池抽样]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/05/12/ji-ben-chou-yang-he-xu-shui-chi-chou-yang/"/>
    <updated>2017-05-12T19:33:10+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/05/12/ji-ben-chou-yang-he-xu-shui-chi-chou-yang</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 前言</a></li>
<li><a href="#sec-2">2. 基本采样方法的简介</a>
<ul>
<li><a href="#sec-2-1">2.1. 单纯随机抽样（simple random sampling）</a></li>
<li><a href="#sec-2-2">2.2. 系统抽样（systematic sampling）</a></li>
</ul>
</li>
<li><a href="#sec-3">3. 扩展</a>
<ul>
<li><a href="#sec-3-1">3.1. 蓄水池抽样算法</a></li>
</ul>
</li>
</ul>
</div>
</div>


<h1>前言<a id="sec-1" name="sec-1"></a></h1>

<p>在阅读机器学习以及神经网络的相关资料中，我们总会时不时看见统计采样的身影。
看似简单的统计采样，在各种学习算法中发挥的强大的作用，一份好的样本，不但可以大幅度降低算法的计算量，
还能较为准确的代表整个样本空间，对算法的效率优化和整体的模型设计都有着非常大的意义。</p>

<h1>基本采样方法的简介<a id="sec-2" name="sec-2"></a></h1>

<h2>单纯随机抽样（simple random sampling）<a id="sec-2-1" name="sec-2-1"></a></h2>

<p><strong>主要思想</strong> ：首先将整体编号，然后采用随机数的方法进行不放回性地抽取，并将所取得的数据组成新的样本。</p>

<ul>
<li><em>优点</em> :操作简单</li>
<li><em>缺点</em> :数据量大时难以编号</li>
</ul>


<p><strong>代码实现</strong> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">loaddata</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="n">dataMat</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fp</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
</span><span class='line'>            <span class="n">dataMat</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dataMat</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">simple_sampling</span><span class="p">(</span><span class="n">dataMat</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">samples</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">dataMat</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">samples</span>
</span><span class='line'>    <span class="k">except</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;sample larger than population&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>系统抽样（systematic sampling）<a id="sec-2-2" name="sec-2-2"></a></h2>

<p><strong>主要思想</strong> ：先将总体分成n个部分，然后依次用相等间隔，从每一个部分中抽取出一个数据项组成观察样本。</p>

<ul>
<li><em>优点</em> :易于理解，样本涵盖范围广，有利于避免边缘化。</li>
<li><em>缺点</em> :容易受总体的增减趋势影响。</li>
</ul>


<p><strong>代码实现</strong> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">loaddata</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="n">dataMat</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fp</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
</span><span class='line'>            <span class="n">dataMat</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dataMat</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">systematic_sampling</span><span class="p">(</span><span class="n">dataMat</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
</span><span class='line'>    <span class="n">k</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dataMat</span><span class="p">)</span><span class="o">/</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>    <span class="n">samples</span> <span class="o">=</span> <span class="p">[</span><span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">dataMat</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">k</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">k</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">samples</span>
</span></code></pre></td></tr></table></div></figure>


<h1>扩展<a id="sec-3" name="sec-3"></a></h1>

<h2>蓄水池抽样算法<a id="sec-3-1" name="sec-3-1"></a></h2>

<p>蓄水池抽样是个很有趣的问题，这个问题的来源是关于等概率抽样的一种思考，
问题是，如何能在不知道总体对象数量（或者数量巨大）的情况下抽取k个对象，
使得每个对象被抽取到的概率相同。</p>

<p><strong>原理</strong> ：考虑最终一定要抽取到k个对象，所以先任意抽出k个，
然后对剩下的对象分别以某种概率概率，使得最终每个对象被抽到的概率相同。</p>

<p><strong>算法步骤</strong> ：</p>

<ul>
<li>输入：长度为N的数组L（N未知或者很大）；输出：被等可能抽出的长度为k的数组l</li>
<li>对输入L取前k个数组成的数组作为蓄水池</li>
<li>对于L的第i(i=k+1,k+2,…,N)个数，任取r为0~i-1之间的整数，若r>k-1,则不进行替换，若r&lt;=k-1,则用第i个数去替换蓄水池中第r个数</li>
<li>遍历一遍L，取到的l中的每个元素都是以概率k/n等可能取到的</li>
</ul>


<p><strong>代码实现</strong> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pool</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">k</span><span class="p">):</span>
</span><span class='line'>    <span class="n">arr</span> <span class="o">=</span> <span class="n">L</span><span class="p">[:</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">e</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="n">k</span><span class="p">:]):</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">r</span><span class="o">&lt;=</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">arr</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">arr</span>
</span><span class='line'><span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">L</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span><span class="s">&quot;d&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l1</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span><span class="s">&quot;d&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l2</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span><span class="s">&quot;d&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">q</span><span class="p">:</span>
</span><span class='line'>        <span class="n">L</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="n">l1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">L</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">l1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">l2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">e</span><span class="o">/</span><span class="nb">sum</span><span class="p">(</span><span class="n">l1</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l1</span><span class="p">,</span><span class="n">l2</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="mi">10000000</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)])</span><span class="c">#生成等量的0，1，2</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="n">L</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">k</span> <span class="o">=</span> <span class="mi">300000</span><span class="c">#设置要抽取的样本的数量，一般远小于总体数量</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">pool</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;value=</span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">count</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span><span class="n">labels</span><span class="o">=</span><span class="n">l1</span><span class="p">,</span><span class="n">labeldistance</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span><span class="n">autopct</span><span class="o">=</span><span class="s">&#39;</span><span class="si">%1.2f%%</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;Reservoir sampling&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PCA（主成分分析）python实现]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/05/07/pca(zhu-cheng-fen-fen-xi-)pythonshi-xian/"/>
    <updated>2017-05-07T19:03:30+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/05/07/pca(zhu-cheng-fen-fen-xi-)pythonshi-xian</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 背景</a></li>
<li><a href="#sec-2">2. PCA算法是如何实现的？</a></li>
<li><a href="#sec-3">3. 基本步骤</a></li>
<li><a href="#sec-4">4. 什么是协方差矩阵？</a></li>
<li><a href="#sec-5">5. 算法实现</a></li>
<li><a href="#sec-6">6. 测试数据</a></li>
<li><a href="#sec-7">7. Demo</a></li>
</ul>
</div>
</div>


<h1>机器学习算法 PCA（主成分分析）python实现</h1>

<h1>背景<a id="sec-1" name="sec-1"></a></h1>

<p>PCA（Principal Component Analysis）,PCA的主要作用是降低数据集的维度，然后挑选出主要的特征。
PCA的主要思想是移动坐标轴，找到方差最大的方向上的特征值。</p>

<h1>PCA算法是如何实现的？<a id="sec-2" name="sec-2"></a></h1>

<p>简单来说，就是将数据从原始的空间中转换到新的特征空间中，
例如原始的空间是三维的(x,y,z)，x、y、z分别是原始空间的三个基，
我们可以通过某种方法，用新的坐标系(a,b,c)来表示原始的数据，
那么a、b、c就是新的基，它们组成新的特征空间。在新的特征空间中，可能所有的数据在c上的投影都接近于0，
即可以忽略，那么我们就可以直接用(a,b)来表示数据，这样数据就从三维的(x,y,z)降到了二维的(a,b)。</p>

<h1>基本步骤<a id="sec-3" name="sec-3"></a></h1>

<ul>
<li>计算数据集的协方差矩阵</li>
<li>计算协方差矩阵的特征值和特征向量</li>
<li>保留最重要的n个特征</li>
</ul>


<h4>参考链接： <a href="http://deeplearning.stanford.edu/wiki/index.php/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90">http://deeplearning.stanford.edu/wiki/index.php/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90</a></h4>

<h1>什么是协方差矩阵？<a id="sec-4" name="sec-4"></a></h1>

<p>其定义是：变量向量减去均值向量，然后乘以变量向量减去均值向量的转置再求均值。
例如x是变量，μ是均值，协方差矩阵等于E[(x-μ)(x-μ)<sup>t</sup>]，
物理意义是这样的，例如x=（x<sub>1</sub>,x<sub>2</sub>,&#x2026;,x<sub>i）</sub>
那么协方差矩阵的第m行n列的数为x<sub>m</sub>与x<sub>n</sub>的协方差，若m=n，则是x<sub>n</sub>的方差。
如果x的元素之间是独立的，那么协方差矩阵只有对角线是有值，
因为x独立的话对于m≠n的情况x<sub>m</sub>与x<sub>n</sub>的协方差为0。另外协方差矩阵是对称的。</p>

<h1>算法实现<a id="sec-5" name="sec-5"></a></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">pca</span><span class="p">(</span><span class="n">dataMat</span><span class="p">,</span> <span class="n">topNfeat</span><span class="o">=</span><span class="mi">9999999</span><span class="p">):</span>
</span><span class='line'>    <span class="n">meanVals</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">dataMat</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#print(meanVals)</span>
</span><span class='line'>    <span class="n">meanRemoved</span> <span class="o">=</span> <span class="n">dataMat</span> <span class="o">-</span> <span class="n">meanVals</span> <span class="c">#remove mean</span>
</span><span class='line'>    <span class="c">#print(meanRemoved)</span>
</span><span class='line'>    <span class="n">covMat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">cov</span><span class="p">(</span><span class="n">meanRemoved</span><span class="p">,</span> <span class="n">rowvar</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">eigvals</span><span class="p">,</span><span class="n">eigvects</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">eig</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mat</span><span class="p">(</span><span class="n">covMat</span><span class="p">))</span> <span class="c">#计算协方差矩阵的特征值和特征向量</span>
</span><span class='line'>    <span class="n">eig_valind</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">eigvals</span><span class="p">)</span>                    <span class="c">#sort, sort goes smallest to largest</span>
</span><span class='line'>    <span class="n">eig_valind</span> <span class="o">=</span> <span class="n">eig_valind</span><span class="p">[:</span><span class="o">-</span><span class="p">(</span><span class="n">topNfeat</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c">#cut off unwanted dimensions</span>
</span><span class='line'>    <span class="n">red_eigvects</span> <span class="o">=</span> <span class="n">eigvects</span><span class="p">[:,</span><span class="n">eig_valind</span><span class="p">]</span>          <span class="c">#reorganize eig vects largest to smallest</span>
</span><span class='line'>    <span class="n">low_datamat</span> <span class="o">=</span> <span class="n">meanRemoved</span> <span class="o">*</span> <span class="n">red_eigvects</span><span class="c">#transform data into new dimensions</span>
</span><span class='line'>    <span class="n">reconmat</span> <span class="o">=</span> <span class="p">(</span><span class="n">low_datamat</span> <span class="o">*</span> <span class="n">red_eigvects</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="o">+</span> <span class="n">meanVals</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">low_datamat</span><span class="p">,</span> <span class="n">reconmat</span>
</span></code></pre></td></tr></table></div></figure>


<h1>测试数据<a id="sec-6" name="sec-6"></a></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">学习时间</span>  <span class="err">分数</span>
</span><span class='line'><span class="mi">9</span>         <span class="mi">39</span>
</span><span class='line'><span class="mi">15</span>        <span class="mi">56</span>
</span><span class='line'><span class="mi">25</span>        <span class="mi">93</span>
</span><span class='line'><span class="mi">14</span>        <span class="mi">61</span>
</span><span class='line'><span class="mi">10</span>        <span class="mi">50</span>
</span><span class='line'><span class="mi">18</span>        <span class="mi">75</span>
</span><span class='line'><span class="mi">0</span>         <span class="mi">32</span>
</span><span class='line'><span class="mi">16</span>        <span class="mi">85</span>
</span><span class='line'><span class="mi">5</span>         <span class="mi">42</span>
</span><span class='line'><span class="mi">19</span>        <span class="mi">70</span>
</span><span class='line'><span class="mi">16</span>        <span class="mi">66</span>
</span><span class='line'><span class="mi">20</span>        <span class="mi">80</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Demo<a id="sec-7" name="sec-7"></a></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">loadDataSet</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">delim</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">fr</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>
</span><span class='line'>    <span class="n">stringArr</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">delim</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fr</span><span class="o">.</span><span class="n">readlines</span><span class="p">()]</span>
</span><span class='line'>    <span class="n">datArr</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">float</span><span class="p">,</span><span class="n">line</span><span class="p">))</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stringArr</span><span class="p">]</span>
</span><span class='line'>    <span class="c">#print(mat(datArr))</span>
</span><span class='line'>    <span class="n">fr</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">mat</span><span class="p">(</span><span class="n">datArr</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pca</span><span class="p">(</span><span class="n">dataMat</span><span class="p">,</span> <span class="n">topNfeat</span><span class="o">=</span><span class="mi">9999999</span><span class="p">):</span>
</span><span class='line'>    <span class="n">meanVals</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">dataMat</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#print(meanVals)</span>
</span><span class='line'>    <span class="n">meanRemoved</span> <span class="o">=</span> <span class="n">dataMat</span> <span class="o">-</span> <span class="n">meanVals</span> <span class="c">#remove mean</span>
</span><span class='line'>    <span class="c">#print(meanRemoved)</span>
</span><span class='line'>    <span class="n">covMat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">cov</span><span class="p">(</span><span class="n">meanRemoved</span><span class="p">,</span> <span class="n">rowvar</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">eigvals</span><span class="p">,</span><span class="n">eigvects</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">eig</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mat</span><span class="p">(</span><span class="n">covMat</span><span class="p">))</span> <span class="c">#计算协方差矩阵的特征值和特征向量</span>
</span><span class='line'>    <span class="n">eig_valind</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">eigvals</span><span class="p">)</span>                    <span class="c">#sort, sort goes smallest to largest</span>
</span><span class='line'>    <span class="n">eig_valind</span> <span class="o">=</span> <span class="n">eig_valind</span><span class="p">[:</span><span class="o">-</span><span class="p">(</span><span class="n">topNfeat</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c">#cut off unwanted dimensions</span>
</span><span class='line'>    <span class="n">red_eigvects</span> <span class="o">=</span> <span class="n">eigvects</span><span class="p">[:,</span><span class="n">eig_valind</span><span class="p">]</span>          <span class="c">#reorganize eig vects largest to smallest</span>
</span><span class='line'>    <span class="n">low_datamat</span> <span class="o">=</span> <span class="n">meanRemoved</span> <span class="o">*</span> <span class="n">red_eigvects</span><span class="c">#transform data into new dimensions</span>
</span><span class='line'>    <span class="n">reconmat</span> <span class="o">=</span> <span class="p">(</span><span class="n">low_datamat</span> <span class="o">*</span> <span class="n">red_eigvects</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="o">+</span> <span class="n">meanVals</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">low_datamat</span><span class="p">,</span> <span class="n">reconmat</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">plotBestFit</span><span class="p">(</span><span class="n">dataSet1</span><span class="p">,</span><span class="n">dataSet2</span><span class="p">):</span>
</span><span class='line'>    <span class="n">dataArr1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">dataSet1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dataArr2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">dataSet2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">dataArr1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">n1</span><span class="o">=</span><span class="n">shape</span><span class="p">(</span><span class="n">dataArr2</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">xcord1</span> <span class="o">=</span> <span class="p">[];</span> <span class="n">ycord1</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">xcord2</span> <span class="o">=</span> <span class="p">[];</span> <span class="n">ycord2</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">xcord3</span><span class="o">=</span><span class="p">[];</span><span class="n">ycord3</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="n">j</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="n">xcord1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dataArr1</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">]);</span> <span class="n">ycord1</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dataArr1</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="n">xcord2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dataArr2</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">]);</span> <span class="n">ycord2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dataArr2</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span><span class='line'>    <span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">xcord1</span><span class="p">,</span> <span class="n">ycord1</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">&#39;s&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">xcord2</span><span class="p">,</span> <span class="n">ycord2</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">&#39;green&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;X1&#39;</span><span class="p">);</span> <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;X2&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">mata</span><span class="o">=</span><span class="n">loadDataSet</span><span class="p">(</span><span class="s">&#39;score&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">=</span> <span class="n">pca</span><span class="p">(</span><span class="n">mata</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">plotBestFit</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://edmondfrank.github.io/images/pca.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web正文提取(偏純文本类)]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/05/02/webzheng-wen-ti-qu-pian-chun-wen-ben-lei/"/>
    <updated>2017-05-02T20:48:47+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/05/02/webzheng-wen-ti-qu-pian-chun-wen-ben-lei</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 算法原理介绍</a>
<ul>
<li><a href="#sec-1-1">1.1. 简介</a></li>
<li><a href="#sec-1-2">1.2. 定义</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 基本步骤</a>
<ul>
<li><a href="#sec-2-1">2.1. 前提需求</a></li>
<li><a href="#sec-2-2">2.2. 提取网页正文</a></li>
<li><a href="#sec-2-3">2.3. 算法实现</a></li>
</ul>
</li>
<li><a href="#sec-3">3. 效果测试</a></li>
</ul>
</div>
</div>


<h1>算法原理介绍<a id="sec-1" name="sec-1"></a></h1>

<h2>简介<a id="sec-1-1" name="sec-1-1"></a></h2>

<p>本文主要采用基于标记窗的方法来提取网页的正文信息，不仅仅适合于处理一个网页中所有正文
信息均放在一个td的情况，也适合于处理网页正文放在多个td中的情况。即，它能够解决非Table
结构的网页正文提取问题。</p>

<h2>定义<a id="sec-1-2" name="sec-1-2"></a></h2>

<p>一般称HTML中成对出现的标记为标记对，称HTML格式的网页中出现在Title之后显示内容为非空的
标记对为标记窗</p>

<h1>基本步骤<a id="sec-2" name="sec-2"></a></h1>

<h2>前提需求<a id="sec-2-1" name="sec-2-1"></a></h2>

<p>满足规范化网页，即：</p>

<ul>
<li>除了网页标记tag外的地方出现"&lt;&ldquo;,&rdquo;>&ldquo;用&lt;&gt;替代</li>
<li>所有标记的属性值放在引号中，如 a herf=&ldquo;www.baidu.com"。</li>
<li>所有标记都是匹配的，即每个开始标记均对应着一个结束，如<body></body></li>
<li>所有标记都是正确嵌套的</li>
</ul>


<h2>提取网页正文<a id="sec-2-2" name="sec-2-2"></a></h2>

<ol>
<li>找出所有的标记窗Tw，对每一个标记窗Tw<sub>i</sub>(i=1,&#x2026;,N),去掉其中的HTML标记，得到不含任何HTML</li>
</ol>


<p>标记的字符串。
2.  对每个标记窗Tw<sub>i</sub> 内的字符串分词，得到字符串序列。取出S<sub>twi</sub> 中的实词，得到S<sub>twi</sub> ＝{</p>

<p>W<sub>tw1</sub>,W<sub>tw2</sub>,&#x2026;,W<sub>twq</sub>}。使用Levenshtein Distance公式计算标题词序列S<sub>title与字符串</sub>
序列S<sub>twi的距离（即主题相关性）</sub>
3.  比较计算结果和閥值大小，如果小于则为正文信息，将其提取，否则，舍弃。</p>

<h2>算法实现<a id="sec-2-3" name="sec-2-3"></a></h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#encoding=utf-8</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">jieba</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="c">#虚词列表</span>
</span><span class='line'><span class="n">excludeWords</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;excludeWords&#39;</span><span class="p">,</span><span class="s">&#39;r+&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">excludeWords</span><span class="o">=</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">excludeWords</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">excludeWords</span><span class="p">)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">domNode</span><span class="p">:</span>
</span><span class='line'>    <span class="n">parentNode</span><span class="o">=</span><span class="bp">None</span>
</span><span class='line'>    <span class="n">currNode</span><span class="o">=</span><span class="bp">None</span>
</span><span class='line'>    <span class="n">innerText</span><span class="o">=</span><span class="bp">None</span>
</span><span class='line'>    <span class="n">posi</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">parentNode</span><span class="p">,</span><span class="n">currNode</span><span class="p">,</span><span class="n">innerText</span><span class="p">,</span><span class="n">posi</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">parentNode</span><span class="o">=</span><span class="n">parentNode</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">currNode</span><span class="o">=</span><span class="n">currNode</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">innerText</span><span class="o">=</span><span class="n">innerText</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">posi</span><span class="o">=</span><span class="n">posi</span>
</span><span class='line'><span class="k">def</span> <span class="nf">levenshtein</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>    <span class="s">&quot;相似度计算.&quot;</span>
</span><span class='line'>    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Make sure n &lt;= m, to use O(min(n,m)) space</span>
</span><span class='line'>        <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span><span class="n">a</span>
</span><span class='line'>        <span class="n">n</span><span class="p">,</span><span class="n">m</span> <span class="o">=</span> <span class="n">m</span><span class="p">,</span><span class="n">n</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">previous</span><span class="p">,</span> <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="p">,</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">add</span><span class="p">,</span> <span class="n">delete</span> <span class="o">=</span> <span class="n">previous</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">current</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>            <span class="n">change</span> <span class="o">=</span> <span class="n">previous</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">change</span> <span class="o">=</span> <span class="n">change</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">current</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="n">delete</span><span class="p">,</span> <span class="n">change</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">current</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">filter_words</span><span class="p">(</span><span class="n">sourList</span><span class="p">,</span><span class="n">filterList</span><span class="p">):</span>
</span><span class='line'>    <span class="n">dest</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">sourList</span><span class="p">)</span><span class="o">!=</span><span class="s">&quot;&lt;type &#39;set&#39;&gt;&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dest</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">sourList</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">dest</span><span class="o">=</span><span class="n">sourList</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">filterList</span><span class="o">==</span><span class="bp">None</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">filterList</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dest</span>
</span><span class='line'>    <span class="n">dest</span> <span class="o">=</span> <span class="p">[</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">dest</span> <span class="k">if</span> <span class="ow">not</span><span class="p">(</span><span class="n">i</span> <span class="ow">in</span> <span class="n">filterList</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dest</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getContextByNode</span><span class="p">(</span><span class="n">htmlSoup</span><span class="p">,</span><span class="n">titleKeyWordList</span><span class="p">,</span><span class="n">filterList</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sentenceList</span><span class="o">=</span><span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">htmlSoup</span><span class="o">.</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sentenceList</span><span class="o">=</span><span class="n">filter_words</span><span class="p">(</span><span class="n">sentenceList</span><span class="p">,</span><span class="n">excludeWords</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sentenceList</span><span class="o">=</span><span class="n">filter_words</span><span class="p">(</span><span class="n">sentenceList</span><span class="p">,</span><span class="n">filterList</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">levenshtein</span><span class="p">(</span><span class="n">sentenceList</span><span class="p">,</span><span class="n">titleKeyWordList</span><span class="p">)</span><span class="o">&gt;=</span><span class="nb">len</span><span class="p">(</span><span class="n">sentenceList</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sentenceList</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getHTMLContext</span><span class="p">(</span><span class="n">html</span><span class="p">,</span><span class="n">filterList</span><span class="p">):</span>
</span><span class='line'>    <span class="s">&quot;获取html的正文内容，不包含tag标签&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">html</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">html</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="n">encodeHtml</span><span class="o">=</span><span class="n">encodeSpecialTag</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span><span class='line'>    <span class="n">htmlSoup</span><span class="o">=</span><span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">encodeHtml</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#去除script和style内容</span>
</span><span class='line'>    <span class="k">if</span>  <span class="n">htmlSoup</span><span class="o">.</span><span class="n">script</span><span class="o">!=</span><span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">htmlSoup</span><span class="o">.</span><span class="n">script</span><span class="o">.</span><span class="n">replaceWith</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">htmlSoup</span><span class="o">.</span><span class="n">style</span><span class="o">!=</span><span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">htmlSoup</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">replaceWith</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">htmlSoup</span><span class="o">==</span><span class="bp">None</span> <span class="ow">or</span> <span class="n">htmlSoup</span><span class="o">.</span><span class="n">html</span><span class="o">==</span><span class="bp">None</span> <span class="ow">or</span> <span class="n">htmlSoup</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">head</span><span class="o">==</span><span class="bp">None</span> <span class="ow">or</span> <span class="n">htmlSoup</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">title</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#提取标题</span>
</span><span class='line'>    <span class="n">title</span><span class="o">=</span><span class="n">htmlSoup</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">string</span>
</span><span class='line'>    <span class="c">#print(title)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">title</span><span class="o">==</span><span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">titleKeyWordList</span><span class="o">=</span><span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>    <span class="n">titleKeyWordList</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">w</span><span class="p">:</span><span class="n">w</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span><span class="n">titleKeyWordList</span><span class="p">))</span>
</span><span class='line'>    <span class="n">titleKeyWordList</span><span class="o">=</span><span class="n">filter_words</span><span class="p">(</span><span class="n">titleKeyWordList</span><span class="p">,</span><span class="n">excludeWords</span><span class="p">)</span>
</span><span class='line'>    <span class="n">titleKeyWordList</span><span class="o">=</span><span class="n">filter_words</span><span class="p">(</span><span class="n">titleKeyWordList</span><span class="p">,</span><span class="n">filterList</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#print(titleKeyWordList)</span>
</span><span class='line'>    <span class="c"># 实词是否为空</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">titleKeyWordList</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">markWindowsList</span><span class="o">=</span><span class="n">getMarkWindowsList</span><span class="p">(</span><span class="n">htmlSoup</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#print(type(markWindowsList))</span>
</span><span class='line'>    <span class="c">#print(markWindowsList)</span>
</span><span class='line'>    <span class="n">markWindowsList</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">markWindowsList</span><span class="p">,</span><span class="n">key</span><span class="o">=</span><span class="n">cmp_to_key</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span> <span class="nb">cmp</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">posi</span><span class="p">,</span> <span class="n">y</span><span class="o">.</span><span class="n">posi</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#print(titleKeyWordList)</span>
</span><span class='line'>    <span class="n">context</span><span class="o">=</span><span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">markWindowsList</span><span class="p">:</span>
</span><span class='line'>        <span class="n">innerText</span><span class="o">=</span><span class="n">item</span><span class="o">.</span><span class="n">innerText</span>
</span><span class='line'>        <span class="n">markWindowKeyWordList</span><span class="o">=</span><span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">innerText</span><span class="p">)</span>
</span><span class='line'>        <span class="n">markWindowKeyWordList</span><span class="o">=</span><span class="n">filter_words</span><span class="p">(</span><span class="n">markWindowKeyWordList</span><span class="p">,</span><span class="n">excludeWords</span><span class="p">)</span>
</span><span class='line'>        <span class="n">markWindowKeyWordList</span><span class="o">=</span><span class="n">filter_words</span><span class="p">(</span><span class="n">markWindowKeyWordList</span><span class="p">,</span><span class="n">filterList</span><span class="p">)</span>
</span><span class='line'>        <span class="n">kl</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">markWindowKeyWordList</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">kl</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">l</span><span class="o">=</span><span class="n">levenshtein</span><span class="p">(</span><span class="n">titleKeyWordList</span><span class="p">,</span><span class="n">markWindowKeyWordList</span><span class="p">)</span>
</span><span class='line'>        <span class="c">#print(markWindowsList,l)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">l</span><span class="o">&lt;</span><span class="n">kl</span><span class="p">:</span>
</span><span class='line'>            <span class="n">context</span><span class="o">+=</span><span class="n">innerText</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">+</span><span class="s">&#39;.</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span>  <span class="n">decodeSpecialTag</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">-</span><span class="n">y</span>
</span><span class='line'><span class="k">def</span> <span class="nf">cmp_to_key</span><span class="p">(</span><span class="n">mycmp</span><span class="p">):</span>
</span><span class='line'>    <span class="s">&#39;Convert a cmp= function into a key= function&#39;</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">K</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">obj</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mycmp</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">obj</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__gt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mycmp</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">obj</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mycmp</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">obj</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__le__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mycmp</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">obj</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__ge__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mycmp</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">obj</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__ne__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mycmp</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">obj</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">K</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">repl</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class='line'>    <span class="n">contents</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">contents</span> <span class="o">==</span> <span class="s">&#39;&lt;/p&gt;&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;[[p]]&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">contents</span>
</span><span class='line'><span class="k">def</span> <span class="nf">encodeSpecialTag</span><span class="p">(</span><span class="n">html</span><span class="p">):</span>
</span><span class='line'>    <span class="s">&quot;这里的规则有助于正文内容的识别,还可以保留部分标签，如下面就保留了P，br等标签&quot;</span>
</span><span class='line'>    <span class="n">comment</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;!--[.\s\S]*?--&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">comment</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c">#h tag</span>
</span><span class='line'>    <span class="n">hPre</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[\t ]*?[hH][1-6][^&lt;&gt;]*&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">hPre</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;[[h4]]&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hAfter</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[\t ]*?/[hH][1-6][^&lt;&gt;]*&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">hAfter</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;[[/h4]]&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">br</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[ \t]*?br[^&lt;&gt;]*&gt;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;[[br /]]&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">hr</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[ \t]*?hr[^&lt;&gt;]*&gt;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">hr</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;[[hr /]]&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">strongPre</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[\t ]*?strong[^&lt;&gt;]*&gt;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">strongPre</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;[[strong]]&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>    <span class="n">strongAfter</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[\t ]*?/strong[^&lt;&gt;]*&gt;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">strongAfter</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;[[/strong]]&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#    labelPre=re.compile(r&quot;&lt;[\t ]*?label[^&lt;&gt;]*&gt;&quot;, re.IGNORECASE)</span>
</span><span class='line'><span class="c">#    html=labelPre.sub(&#39;[[label]]&#39;, html)</span>
</span><span class='line'><span class="c">#    labelAfter=re.compile(r&quot;&lt;[\t ]*?/label[^&lt;&gt;]*&gt;&quot;, re.IGNORECASE)</span>
</span><span class='line'><span class="c">#    html=labelAfter.sub(&#39;[[/label]]&#39;, html)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#    spanPre=re.compile(r&quot;&lt;[\t ]*?span[^&lt;&gt;]*&gt;&quot;, re.IGNORECASE)</span>
</span><span class='line'><span class="c">#    html=spanPre.sub(&#39;[[span]]&#39;, html)</span>
</span><span class='line'><span class="c">#    spanAfter=re.compile(r&quot;&lt;[\t ]*?/span[^&lt;&gt;]*&gt;&quot;, re.IGNORECASE)</span>
</span><span class='line'><span class="c">#    html=spanAfter.sub(&#39;[[/span]]&#39;, html)</span>
</span><span class='line'>    <span class="n">pPre</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[\t ]*?/p[^&lt;&gt;]*&gt;[^&lt;&gt;]*&lt;[\t ]*?p[^&lt;&gt;]*&gt;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">pPre</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;[[/p]][[p]]&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pAfter</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[\t ]*?p[^&lt;&gt;]*&gt;(?=[^(\[\[)]*\[\[/p\]\]\[\[p\]\])&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">pAfter</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;[[p]]&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#    pAfter=re.compile(r&quot;(\[\[p\]\].*&gt;)([^&lt;&gt;]*)(&lt;/p&gt;)&quot;, re.IGNORECASE)</span>
</span><span class='line'><span class="c">#    html=pAfter.sub(repl,html)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">aPre</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[\t ]*?a[^&lt;&gt;]*&gt;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">aPre</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>    <span class="n">aAfter</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;[\t ]*?/a[^&lt;&gt;]*&gt;&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">aAfter</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#    chardet.detect(html)[&#39;encoding&#39;]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">js</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;(script)[\w\s\S.\u4e00-\u9fa5\uac00-\ud7ff\u30a0-\u30ff\u3040-\u309f]*?&lt;/\1&gt;(?s)&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">js</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>    <span class="n">css</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;&lt;(style)[\w\s\S.\u4e00-\u9fa5\uac00-\ud7ff\u30a0-\u30ff\u3040-\u309f]*?&lt;/\1&gt;(?s)&quot;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">css</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">html</span>
</span><span class='line'><span class="k">def</span> <span class="nf">decodeSpecialTag</span><span class="p">(</span><span class="n">html</span><span class="p">):</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[strong]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;strong&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[/strong]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;/strong&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[hr /]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;hr /&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[br /]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;br /&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[h4]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;h4&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[/h4]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;/h4&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[label]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;label&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[/label]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;/label&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[span]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;span&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[/span]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;/span&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[p]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;p&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">html</span><span class="o">=</span><span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;[[/p]]&quot;</span><span class="p">,</span><span class="s">&quot;&lt;/p&gt;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">html</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">getMarkWindowsList</span><span class="p">(</span><span class="n">bodySoup</span><span class="p">):</span>
</span><span class='line'>    <span class="c">#过滤a标签</span>
</span><span class='line'>    <span class="n">nodeQueue</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="n">innerTextNodeList</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="n">nodeQueue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">bodySoup</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">nodeQueue</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">currNode</span><span class="o">=</span><span class="n">nodeQueue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">del</span> <span class="n">nodeQueue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">childNode</span>  <span class="ow">in</span> <span class="n">currNode</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">childNode</span><span class="o">.</span><span class="n">string</span><span class="o">!=</span><span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="n">innerText</span><span class="o">=</span><span class="n">childNode</span><span class="o">.</span><span class="n">string</span>
</span><span class='line'>                <span class="n">innerText</span><span class="o">=</span><span class="n">innerText</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\r\n</span><span class="s">&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\r</span><span class="s">&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">=</span><span class="n">innerText</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;  &#39;</span><span class="p">,</span><span class="s">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;  &#39;</span><span class="p">,</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">tmpInt</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">tmp</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">tmpInt</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span><span class="k">continue</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">tmp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">))</span><span class="o">&lt;=</span><span class="mi">2</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">innerText</span><span class="p">)</span><span class="o">-</span><span class="n">tmpInt</span><span class="o">&gt;</span><span class="n">tmpInt</span><span class="p">:</span><span class="k">continue</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span>  <span class="ow">and</span> <span class="n">innerText</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;©&quot;</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">innerText</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;&amp;copy;&quot;</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span> <span class="p">:</span>
</span><span class='line'>                    <span class="n">dn</span><span class="o">=</span><span class="n">domNode</span><span class="p">(</span><span class="n">childNode</span><span class="o">.</span><span class="n">parent</span><span class="p">,</span><span class="n">childNode</span><span class="p">,</span><span class="n">innerText</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">innerTextNodeList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">dn</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'><span class="c">#                    print &quot;i&quot;,</span>
</span><span class='line'><span class="c">#                    print i,</span>
</span><span class='line'><span class="c">#                    print &quot;=&quot;,</span>
</span><span class='line'><span class="c">#                    print childNode</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="c">#这里的规则可能有助于垃圾信息的排除</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">childNode</span><span class="o">.</span><span class="n">name</span><span class="o">!=</span><span class="bp">None</span> <span class="ow">and</span> <span class="n">childNode</span><span class="o">.</span><span class="n">name</span><span class="o">==</span><span class="s">&#39;style&#39;</span><span class="p">:</span><span class="k">continue</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">childNode</span><span class="o">.</span><span class="n">name</span><span class="o">!=</span><span class="bp">None</span> <span class="ow">and</span> <span class="n">childNode</span><span class="o">.</span><span class="n">name</span><span class="o">==</span><span class="s">&#39;script&#39;</span><span class="p">:</span><span class="k">continue</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">childNode</span><span class="o">.</span><span class="n">name</span><span class="o">!=</span><span class="bp">None</span> <span class="ow">and</span> <span class="n">childNode</span><span class="o">.</span><span class="n">name</span><span class="o">==</span><span class="s">&quot;a&quot;</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">childNode</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">&lt;=</span><span class="mi">2</span><span class="p">:</span><span class="k">continue</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">childNode</span><span class="o">.</span><span class="n">name</span><span class="o">!=</span><span class="bp">None</span> <span class="ow">and</span> <span class="n">childNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">name</span><span class="o">!=</span><span class="bp">None</span>   <span class="ow">and</span>  <span class="n">childNode</span><span class="o">.</span><span class="n">name</span><span class="o">==</span><span class="s">&quot;span&quot;</span> <span class="ow">and</span> <span class="p">(</span> <span class="n">childNode</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">name</span><span class="o">==</span><span class="s">&quot;li&quot;</span> <span class="p">)</span><span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">childNode</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">&lt;=</span><span class="mi">3</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">continue</span>
</span><span class='line'>                <span class="n">nodeQueue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">childNode</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">innerTextNodeList</span>
</span><span class='line'>
</span><span class='line'><span class="c">#soup=BeautifulSoup(html)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class='line'>    <span class="n">headers</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;User-Agent&#39;</span><span class="p">:</span><span class="s">&#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">c</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;http://www.xfocus.net/articles/200808/984.html&#39;</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">content</span><span class="o">=</span><span class="n">c</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;gbk&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#content=c.text</span>
</span><span class='line'>    <span class="c"># #print(content)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">getHTMLContext</span><span class="p">(</span><span class="n">content</span><span class="p">,[</span><span class="s">&#39;&#39;</span><span class="p">]))</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">test</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h1>效果测试<a id="sec-3" name="sec-3"></a></h1>

<p><img src="http://edmondfrank.github.io/images/webcrawl.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比较网页结构相似度]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/04/23/bi-jiao-wang-ye-jie-gou-xiang-si-du/"/>
    <updated>2017-04-23T12:34:29+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/04/23/bi-jiao-wang-ye-jie-gou-xiang-si-du</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 总体介绍</a></li>
<li><a href="#sec-2">2. 最长公共子序列</a></li>
<li><a href="#sec-3">3. 递归式展示</a></li>
<li><a href="#sec-4">4. 算法实现（python实现）</a></li>
<li><a href="#sec-5">5. 网页相似度计算</a></li>
</ul>
</div>
</div>


<h1>总体介绍<a id="sec-1" name="sec-1"></a></h1>

<p>网页网页结构相似度计算通常是网页自动分类的基础，在一般的网页信息提取中，判断网页片断是“噪声”还是“有效信息”通常是个两类分类问题。
简单地，我们可以把一般网页分为三个类，即：</p>

<ul>
<li>目录导航式页面（List\Index Page）</li>
<li>详细页面（Detail Page）</li>
<li>未知页面（Unknown Page）</li>
</ul>


<p>由于网页本身就可以抽象成串行的节点或者是DOM树，那么对于串行序列，就可以常用最长公共子序列来衡量相似度</p>

<h1>最长公共子序列<a id="sec-2" name="sec-2"></a></h1>

<p>最长公共子序列是动态规划的基本问题：</p>

<p>序列a共有m个元素，序列b共有n个元素，如果a[m-1]==b[n-1]，</p>

<p>那么a[:m]和b[:n]的最长公共子序列长度就是a[:m-1]和b[:n-1]的最长公共子序列长度+1；</p>

<p>如果a[m-1]!=b[n-1]，那么a[:m]和b[:n]的最长公共子序列长度就是</p>

<p>MAX（a[:m-1]和b[:n]的最长公共子序列长度，a[:m]和b[:n-1]的最长公共子序列长度）</p>

<h1>递归式展示<a id="sec-3" name="sec-3"></a></h1>

<p>　<img src="http://edmondfrank.github.io/images/lcs.png"></p>

<h1>算法实现（python实现）<a id="sec-4" name="sec-4"></a></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#params：</span>
</span><span class='line'><span class="c"># - a : str</span>
</span><span class='line'><span class="c"># - b : str</span>
</span><span class='line'><span class="c">#return</span>
</span><span class='line'><span class="c"># - c : 过程处理矩阵</span>
</span><span class='line'><span class="c"># - c[x][y] : the lcs-length(最长公共子序列长度)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">lcs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>    <span class="n">lena</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lenb</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lenb</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lena</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lena</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">lenb</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="p">[</span><span class="n">lena</span><span class="p">][</span><span class="n">lenb</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>网页相似度计算<a id="sec-5" name="sec-5"></a></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#-*-coding:utf-8-*-</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">lxml.html.soupparser</span> <span class="kn">as</span> <span class="nn">soupparser</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;User-Agent&quot;</span><span class="p">:</span><span class="s">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_domtree</span><span class="p">(</span><span class="n">html</span><span class="p">):</span>
</span><span class='line'>    <span class="n">dom</span> <span class="o">=</span> <span class="n">soupparser</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">dom</span><span class="o">.</span><span class="n">iter</span><span class="p">():</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">child</span><span class="o">.</span><span class="n">tag</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">similar_web</span><span class="p">(</span><span class="n">a_url</span><span class="p">,</span><span class="n">b_url</span><span class="p">):</span>
</span><span class='line'>    <span class="n">html1</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">a_url</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>    <span class="n">html2</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">b_url</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>    <span class="n">dom_tree1</span> <span class="o">=</span> <span class="s">&quot;&gt;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">e</span><span class="p">:</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="nb">str</span><span class="p">),</span><span class="nb">list</span><span class="p">(</span><span class="n">get_domtree</span><span class="p">(</span><span class="n">html1</span><span class="p">)))))</span>
</span><span class='line'>    <span class="n">dom_tree2</span> <span class="o">=</span> <span class="s">&quot;&gt;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">e</span><span class="p">:</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="nb">str</span><span class="p">),</span><span class="nb">list</span><span class="p">(</span><span class="n">get_domtree</span><span class="p">(</span><span class="n">html2</span><span class="p">)))))</span>
</span><span class='line'>    <span class="n">c</span><span class="p">,</span><span class="n">flag</span><span class="p">,</span><span class="n">length</span> <span class="o">=</span> <span class="n">lcs</span><span class="p">(</span><span class="n">dom_tree1</span><span class="p">,</span><span class="n">dom_tree2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">2.0</span><span class="o">*</span><span class="n">length</span><span class="o">/</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dom_tree1</span><span class="p">)</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">dom_tree2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">percent</span> <span class="o">=</span> <span class="n">similar_web</span><span class="p">(</span>
</span><span class='line'><span class="s">&#39;http://edmondfrank.github.io/blog/2017/04/05/qian-tan-mongodb/&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s">&#39;http://edmondfrank.github.io/blog/2017/03/27/emacsshi-yong-zhi-nan/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">percent</span><span class="p">)</span> <span class="c">#相似度（百分比）</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈MongoDB]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/04/05/qian-tan-mongodb/"/>
    <updated>2017-04-05T14:28:56+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/04/05/qian-tan-mongodb</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Mongodb 简介</a>
<ul>
<li><a href="#sec-1-1">1.1. 基本概念</a>
<ul>
<li><a href="#sec-1-1-1">1.1.1. 数据库（database）</a></li>
<li><a href="#sec-1-1-2">1.1.2. 文档（document）</a></li>
<li><a href="#sec-1-1-3">1.1.3. 集合（collection）</a></li>
</ul>
</li>
<li><a href="#sec-1-2">1.2. 基本设计</a></li>
</ul>
</li>
<li><a href="#sec-2">2. MongoDB 启动</a></li>
<li><a href="#sec-3">3. MongoDB shell 简介</a>
<ul>
<li><a href="#sec-3-1">3.1. 运行shell</a></li>
</ul>
</li>
<li><a href="#sec-4">4. MongoDB 客户端</a></li>
<li><a href="#sec-5">5. MongoDB 基本操作</a>
<ul>
<li><a href="#sec-5-1">5.1. 创建</a></li>
<li><a href="#sec-5-2">5.2. 读取</a></li>
<li><a href="#sec-5-3">5.3. 更新</a></li>
<li><a href="#sec-5-4">5.4. 删除</a></li>
</ul>
</li>
</ul>
</div>
</div>


<h1>Mongodb 简介<a id="sec-1" name="sec-1"></a></h1>

<p>MongoDB 是一款强大，灵活，且易于扩展的通用型数据库。</p>

<p>它能够扩展出非常多的功能，如二级索引，范围查询，排序，聚合以及本地空间索引的功能</p>

<h2>基本概念<a id="sec-1-1" name="sec-1-1"></a></h2>

<p>Mongodb 是一个面向文档的NoSQL型数据库，不采用关系模型。
其中mongodb 不再有“行”的概念，而是以文档取而代之。</p>

<p>另外也不存在预定义模式，即文档的键（key）和值（value）不再是固定的类型和大小</p>

<h3>数据库（database）<a id="sec-1-1-1" name="sec-1-1-1"></a></h3>

<p>Mongodb 的一个实例可以拥有多个相互独立的数据库,</p>

<p>在Mongodb中，多个文档组合成集合，而多个集合即组成数据库。</p>

<h3>文档（document）<a id="sec-1-1-2" name="sec-1-1-2"></a></h3>

<p>Mongodb 中的数据的基本单元，类似于关系型数据库管理系统中的行</p>

<p>表示形式：</p>

<p>{&ldquo;greeting&rdquo;:&ldquo;Hello World&rdquo;,
          &#x2026;.           }</p>

<h3>集合（collection）<a id="sec-1-1-3" name="sec-1-1-3"></a></h3>

<p>类似的，可以看作是一个拥有动态模式的表</p>

<h2>基本设计<a id="sec-1-2" name="sec-1-2"></a></h2>

<p>Mongodb 的设计采用横向扩展。同时面向文档的数据模型</p>

<p>使它能够很容易的在多台服务器之间进行数据分割。</p>

<h1>MongoDB 启动<a id="sec-2" name="sec-2"></a></h1>

<p>通常，MongoDB做为网络服务守护进程运行，客户端可连接到该服务器并执行操作。</p>

<ol>
<li><p>下载MongoDB（<a href="http://www.mongodb.org/downloads">http://www.mongodb.org/downloads</a>）</p></li>
<li><p>解压，并运行 <strong>mongod</strong> 命令</p></li>
</ol>


<p>启动后，在默认情况下服务器会打印版本和系统信息，并监听27017端口。</p>

<p>除此之外 mongod 还会启动一个非常基本的HTTP服务器，监听比主端口号高1000的端口</p>

<p>这意味着你可以访问 <a href="http://localhost:28017">http://localhost:28017</a> 来获取数据库管理信息</p>

<h1>MongoDB shell 简介<a id="sec-3" name="sec-3"></a></h1>

<p>MongoDB 自带JavaScript Shell，可以在shell中用命令行与Mongodb实例交互</p>

<h2>运行shell<a id="sec-3-1" name="sec-3-1"></a></h2>

<pre><code>mongo

MongoDB Shell version: 2.4.0

connecting to :test

&gt;
</code></pre>

<p>shell 是一个功能完备的JavaScript解释器，可以运行任意JavaScript程序，另外还可以充分使用JavaScript的标准库</p>

<h1>MongoDB 客户端<a id="sec-4" name="sec-4"></a></h1>

<p>在客户端的shell启动后，如果要查看db当前执行哪个数据库，可以使用 <strong>db</strong> 命令</p>

<pre><code>&gt; db

test
</code></pre>

<h1>MongoDB 基本操作<a id="sec-5" name="sec-5"></a></h1>

<h2>创建<a id="sec-5-1" name="sec-5-1"></a></h2>

<p><em>insert</em> 函数可以将一个文档添加到集合中。举一个存储文章的例子：首先，</p>

<p>创建一个名为post的局部变量，这是一个JavaScript对象，用于表示我们的文档</p>

<p>他会有几个键：“ <strong>title</strong> ”、“ <strong>content</strong> ”和 “ <strong>date</strong> ”（发布时间）</p>

<pre><code>&gt; post = {
"title":"hello",
"content":"Here's my blog post",
"date":new Date()
}

&gt; db.blog.insert(post)
</code></pre>

<p>此时，这篇文章已经存到数据库中了，要查看它可用调用集合的 <em>find</em> 方法</p>

<pre><code>&gt; db.blog.find()
</code></pre>

<h2>读取<a id="sec-5-2" name="sec-5-2"></a></h2>

<p><em>find</em> 和 <em>findOne</em> 可以接收一个 <strong>查询文档</strong> 为限定条件，并返回符合一定条件的文件，使用</p>

<p><em>find</em> 的默认自动显示最多20个匹配的文档。</p>

<h2>更新<a id="sec-5-3" name="sec-5-3"></a></h2>

<p>使用 <em>update</em> 修改文章：</p>

<p>update接收（至少）两个参数：
-   第一个是限定条件（用于匹配待更新的文档）
-   第二个是新的文档</p>

<p>例如我们为之前的文章增加评论功能，就需要新增一个键，用于保存评论数组。</p>

<pre><code>&gt; post.comments = []
[ ]

&gt; db.blog.update({ title : "hello"} , post)
</code></pre>

<p>再用 find 查看一下，就可以看见新的键。</p>

<pre><code>&gt; db.blog.find()
</code></pre>

<h2>删除<a id="sec-5-4" name="sec-5-4"></a></h2>

<p>使用remove方法可以将文档从数据库中永久删除。如果没用任何参数传入，他将删除集合内的全部文档。</p>

<p>同时，它可以接收一个做为限定条件的文档做为参数。例如：</p>

<pre><code>&gt; db.blog.reomve({ title : "hello" })
</code></pre>

<hr />

<p><strong><em>有关Mongodb的简单描述到此结束，更多Mongdb使用操作内容，欢迎参考下一篇文章</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs使用指南]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/03/27/emacsshi-yong-zhi-nan/"/>
    <updated>2017-03-27T20:33:02+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/03/27/emacsshi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<h1>Emacs快速指南</h1>

<h2>传说中的神级编辑器？？</h2>

<h3>基础介绍</h3>

<p>vim 和 emacs 分别被称为「 编辑器之神」与「 神之编辑器」，自有其独到之处。</p>

<blockquote><p>快捷键的无差别延续</p></blockquote>

<p>vim 和 emacs 诞生于 30 年前，快捷键基本没什么变化。这意味着，一旦你学会使用这两个编辑器，无论以后软件怎么更新，都不需要学习别的快捷键了。因为历史较长，加上快捷键变化不大，新兴编辑器大多提供模拟 vim/emacs 操作的插件。这也方便了用户迁移到其他编辑器，无需学习更多的同质快捷键。</p>

<blockquote><p>基础和适用的默认配置</p></blockquote>

<p>vim 和 emacs 都可以运行在终端，也有图形化的软件，非常适合快速编辑文件。当需要在无法运行图形界面的服务器上编辑代码的时候，二者也足以胜任。虽然在终端也有 nano 这样的编辑器，但毕竟过于简洁，无法支撑较为复杂的编辑工作。这两个编辑器的默认配置的功能就已经很强大了，语法着色、补全、缩进等功能都很不错。</p>

<blockquote><p>emacs有别于vim的地方</p></blockquote>

<p>为了实现强大的功能，vim 选择了多模式编辑（Normal, Insert, Visual 模式），而 emacs 没有输入上的 mode 差别，所以需要依赖复杂的快捷键来实现强大的编辑功能，正如上图所示。emacs 插件想象力更加丰富，有「伪装成编辑器的操作系统」之称。插件的 major mode 和 minor mode 的设计很出彩，对一个文件，只有一个 major mode，但是可以有多个 minor mode，这样一个文件一个主插件，多个附加插件，可以实现很多有趣的效果。</p>

<h3>快捷键说明</h3>

<p>在网上的Emacs文档或手册中，总有一些快捷键说明如下所示：</p>

<p>C-v : 其中C 代表 Ctrl，因此这项快捷键代表 Ctrl + C
M-v : 其中M 代表 Alt，这项快捷键代表 Alt + V</p>

<h3>基本光标控制</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>                    上一行 C-p
</span><span class='line'>                      ：
</span><span class='line'>                      ：
</span><span class='line'>    向左移 C-b：：： 目前光标位置 ：：： 向右移 C-f
</span><span class='line'>                      ：
</span><span class='line'>                      ：
</span><span class='line'>                    下一行 C-n
</span><span class='line'>
</span><span class='line'>                 亦可使用小键盘方向键
</span></code></pre></td></tr></table></div></figure>


<p>M-f 移动到词的末尾
M-b 移动到词的首部</p>

<p>请注意 C-f 、C-b 和 M-f 、M-b 两对之间的类比关系。通常的惯例是：META 系
列组合键用来操作“由语言定义的单位（比如词、句子、段落）”，而 CONTROL
系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。</p>

<p>这里对简单的光标移动命令做一个总结，其中也包括了整词和整句的移动：</p>

<pre><code>    C-f     向右移动一个字符
    C-b     向左移动一个字符

    M-f     向右移动一个词【对中文是移动到下一个标点符号】
    M-b     向左移动一个词【对中文是移动到上一个标点符号】

    C-n     移动到下一行
    C-p     移动到上一行

    C-a     移动到行首
    C-e     移动到行尾

    M-a     移动到句首
    M-e     移动到句尾
</code></pre>

<h2><em>窗格(WINDOWS)</em></h2>

<p>Emacs 可以有多个“窗格”，每个窗格显示不同的文字。后面会介绍怎么对付多个窗
格，现在我们先学会如何关掉多余的窗格。其实也很简单：</p>

<pre><code>    C-x 1   只保留一个窗格（也就是关掉其它所有窗格）。
</code></pre>

<p>也就是先按 CONTROL-x 然后再按 1。C-x 1 会保留光标所在的窗格，并将其扩大
到整个屏幕，同时关掉所有其它的窗格。</p>

<blockquote><p>把光标移到本行然后输入 C-u 0 C-l。</p>

<p>输入 C-h k C-f。观察当一个新窗格出现时当前窗格（用来显示
  C-f 命令的文档）是如何缩小的。</p>

<p>输入 C-x 1 关掉文档窗格。</p></blockquote>

<p><em>Emacs中的删除</em></p>

<p>在Emacs删除文字有很多种方法。在说明相应的操作方法前，我们需要先弄明白几个概念：“删除（Delete）”、“移除（Kill）”、“召回（Yank）”还有“移除环（Kill-Ring）”</p>

<p>好吧，“删除”和“移除”在文本编辑的过程中实现的效果非常类似——对应的字符或内容在文档中“消失”了。存在细微差别的地方在与取回这些“消失”的内容的方法上：</p>

<p>被“删除”的内容，只能使用“撤销（Undo）”的办法来找回这些“消失的字符”。和大多数人预想的一样，这些“消失的字符”只会重新出现在原来它们所在的地方。</p>

<p><em>Emacs的剪贴板以及Undo/Redo</em></p>

<p>被“移除”的内容，除了可以使用“撤销”的方法了找回内容以外，还可以使用“召回”的方法让这些“消失”的内容出现在当前光标之后。这样的操作效果和使用了“剪贴板”的效果类似了。</p>

<p>“召回”，是将移除的内容插入到光标所在位置的一种操作。使用召回操作，让人有一种使用“剪贴板”的感觉。不过Emacs会记录多次“移除”操作的内容，这一点可要比windows操作系统提供的“剪贴板”功能要强大多了。这种记录多次“移除”操作内容的机制在Emacs中叫做“移除环”——Yank Ring。</p>

<p><em>Emacs中的查找和替换</em></p>

<p>任何编辑器都有查找和替换的功能，Emacs也不例外。在Emacs中最常用的查找方法是“增量查找”。除此之外，Emacs还提供了“正则查找”、“词组查找”、“简单查找”三种方法。这些查找方法，一般来说，熟练掌握其中的一至两类就足够应付日常使用的需要了。</p>

<p><em>Emacs中的文件操作</em></p>

<p>基础的Emacs文件操作是创建、保存、另存。</p>

<p>创建新文件：
使用组合键 Ctrl-x Ctrl-f 打开“find file”
在提示符处输入一个不存在的文件名
回车确认后，Emacs即创建了一个空的Buffer供输入使用。
保存文件
Emac的保存文件非常简单，只需要按下组合键Ctrl-x Ctrl-s即可。
另存文件
要另存一个文件，按下组合键Ctrl-x Ctrl-w，按提示输入新的文件名即可。</p>

<h3>常用快捷键</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>C-v : 向前移动一屏（PageUp）
</span><span class='line'>M-v : 向后移动一屏（PageDn）
</span><span class='line'>
</span><span class='line'>导航操作：
</span><span class='line'>c-p            上一行
</span><span class='line'>c-n            下一行
</span><span class='line'>c-f            下一个字符
</span><span class='line'>c-b            上一个字符
</span><span class='line'>c-a            行首
</span><span class='line'>c-e            行尾
</span><span class='line'>
</span><span class='line'>M-p            下一段
</span><span class='line'>M-b            上一段
</span><span class='line'>M-f            下一个单词
</span><span class='line'>M-b            上一个单词
</span><span class='line'>M-a            句首
</span><span class='line'>M-e            句尾
</span><span class='line'>
</span><span class='line'>c-v            下一页
</span><span class='line'>M-v            上一页
</span><span class='line'>
</span><span class='line'>c-l            以本行为中间显示
</span><span class='line'>
</span><span class='line'>M-&lt;            文本头
</span><span class='line'>M-&gt;            文本尾部
</span><span class='line'>
</span><span class='line'>c-M-v            不移动光标让另一个窗口翻下一页
</span><span class='line'>c-S-M-v<span class="o">(</span>S:shift<span class="o">)</span>    不移动光标让另一个窗口翻上一页
</span><span class='line'>
</span><span class='line'>撤销操作：
</span><span class='line'>c-_ / c-x c-u        撤销
</span><span class='line'>c-h l            列出最近操作
</span><span class='line'>M-x revert-buffer    重新读入buffer<span class="o">(</span>撤销本次全部更改<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>文件操作:
</span><span class='line'>c-x c-f            打开文件（没有就创建一个新的）
</span><span class='line'>c-x c-s            保存文件
</span><span class='line'>c-x c-w            另存为文件
</span><span class='line'>M-x recover-file 文件名    从错误中恢复<span class="o">(</span>读取自动保存的文件<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>buffers:
</span><span class='line'>c-x b 输入buffer名字    切换buffer
</span><span class='line'>    方向键可以切换buffer
</span><span class='line'>c-x k 输入buffer名字    终止buffer
</span><span class='line'>c-x c-b            列出所有buffer
</span><span class='line'>    之后按下：
</span><span class='line'>    <span class="m">1</span>            让选中的个buffer全屏
</span><span class='line'>    o            让选中的buffer在另外的窗口显示并且切换到该窗口
</span><span class='line'>    c-o         让选中的buffer在另外的窗口显示并且不切换到该窗口
</span><span class='line'>    s            标记当前buffer为保存
</span><span class='line'>    d/c-d        标记一个要删除的buffer并且光标下/上移动
</span><span class='line'>    x            按下x后执行标记了要删除的buffer或者标记要保存的buffer
</span><span class='line'>
</span><span class='line'>fram<span class="p">&amp;</span>windows：
</span><span class='line'>c-x <span class="m">2</span>            在frame内横向分割两个windows
</span><span class='line'>c-x <span class="m">3</span>            在frame内纵向分割两个windows
</span><span class='line'>c-x <span class="m">1</span>            删除其他windows
</span><span class='line'>c-x <span class="m">0</span>            删除当前windows
</span><span class='line'>c-x o            切换到另外的窗口
</span><span class='line'><span class="c">#c-x {            水平缩小当前窗口（分两个窗口的时候）</span>
</span><span class='line'><span class="c">#c-x }            水平扩大当前窗口</span>
</span><span class='line'>c-x <span class="m">5</span> <span class="m">2</span>            水平创建一个新的frame
</span><span class='line'>c-x <span class="m">5</span> <span class="m">0</span>         杀死当前的fram（最后一个不可以哦）
</span><span class='line'>c-x <span class="m">5</span> o            切换fram
</span><span class='line'>
</span><span class='line'>Searching:
</span><span class='line'>c-s            向前搜索
</span><span class='line'>c-r            向后搜索
</span><span class='line'>搜索时按下：
</span><span class='line'>    M-p        搜索历史向上
</span><span class='line'>    M-n        搜索历史向后
</span><span class='line'>M-%            搜索并替换，替换时询问每一个是否需要被替换（y表示是n表示否!表示全部y）
</span><span class='line'>M-x replace-string    搜索并替换，不询问
</span><span class='line'>c-r             进入紧急编辑<span class="o">(</span>保存当前的查询替换的状态<span class="o">)</span>
</span><span class='line'>c-M-c            退出紧急编辑
</span><span class='line'>c-<span class="o">[</span>            取消紧急编辑<span class="o">(</span>无视原来保护的现场Orz<span class="o">)</span>
</span><span class='line'>M-x occur 匹配串    找到并列出所有匹配串
</span><span class='line'>
</span><span class='line'>helping:
</span><span class='line'>c-h            帮助首菜单
</span><span class='line'>c-h c-h            帮助buffer
</span><span class='line'>c-h k    按键        显示绑定这个键位的功能
</span><span class='line'>c-h a    输入功能    显示对应的按键<span class="o">(</span>正则匹配<span class="o">)</span>
</span><span class='line'>c-x c-h            显示全部c-x的命令
</span><span class='line'>c-x w    输入功能    显示对应的按键（非正则匹配）
</span><span class='line'>c-x h    输入功能    显示这个功能的具体功能
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算编辑距离(Levenshtein距离)]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/03/22/ji-suan-bian-ji-ju-chi-levenshteinju-chi/"/>
    <updated>2017-03-22T17:33:02+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/03/22/ji-suan-bian-ji-ju-chi-levenshteinju-chi</id>
    <content type="html"><![CDATA[<h1>计算字符串的相似度（编辑距离）</h1>

<h2>Levenshtein 距离</h2>

<p>Levenshtein距离，又称编辑距离，指的是两个字符串之间，由一个转换成另外一个所需的最少编辑量。
编辑距离算法首先由俄国科学家Levenshstance提出，原理可大致举例如下：</p>

<blockquote><p>字符串A：abcdefg
字符串B：abcdef</p></blockquote>

<p>以上两串字符串可以通过添加或是删除字符“g”的方式达到一致的目的。这两种方案都需要一次操作。</p>

<h2>算法实现</h2>

<p>此问题可以采用经典的动态规划求解。</p>

<h2>计算两字符串的最长公共子序列相似</h2>

<p>设Ai为字符串A(a1a2a3 … am)的前i个字符（即为a1,a2,a3 … ai）
设Bj为字符串B(b1b2b3 … bn)的前j个字符（即为b1,b2,b3 … bj）</p>

<p>设 L(i,j)为使两个字符串和Ai和Bj相等的最小操作次数。
当ai==bj时 显然</p>

<blockquote><p>L(i,j) = L(i-1,j-1)</p></blockquote>

<p>当ai!=bj时</p>

<blockquote><p>若将它们修改为相等，则对两个字符串至少还要操作L(i-1,j-1)次
若删除ai或在bj后添加ai，则对两个字符串至少还要操作L(i-1,j)次
若删除bj或在ai后添加bj，则对两个字符串至少还要操作L(i,j-1)次
此时L(i,j) = min( L(i-1,j-1), L(i-1,j), L(i,j-1) ) + 1</p></blockquote>

<p>所以，L(i,0)=i，L(0,j)=j, 再利用上述的递推公式，可以直接计算出L(i,j)值。</p>

<p>算法实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">calcdistance</span><span class="p">(</span><span class="n">string</span><span class="p">,</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">minvalue</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">str1</span> <span class="p">,</span><span class="n">str2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Please input 2 strings:&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">str1</span><span class="o">&gt;&gt;</span><span class="n">str2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">str1</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">str2</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">calcdistance</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span><span class="n">str2</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">calcdistance</span><span class="p">(</span><span class="n">string</span> <span class="n">s1</span><span class="p">,</span> <span class="n">string</span> <span class="n">s2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">s1</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">s2</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">len1</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">len2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">len2</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">len1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="o">**</span> <span class="n">cnt</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">*</span><span class="p">[</span><span class="n">len1</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">len2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">len2</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="n">cnt</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//cnt[0][0] = 0;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">len2</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="n">s2</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>                <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">minvalue</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                        <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span>
</span><span class='line'>                        <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">[</span><span class="n">len1</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">len2</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">delete</span> <span class="p">[]</span> <span class="n">cnt</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">delete</span> <span class="p">[]</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">minvalue</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">){</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&lt;=</span><span class="n">b</span> <span class="o">?</span> <span class="nl">a</span> <span class="p">:</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'> <span class="k">return</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">c</span><span class="o">?</span> <span class="nl">t</span> <span class="p">:</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vector版本如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">calcdistance</span><span class="p">(</span><span class="n">string</span><span class="p">,</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">str1</span> <span class="p">,</span><span class="n">str2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;Please input 2 strings:&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">str1</span><span class="o">&gt;&gt;</span><span class="n">str2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">str1</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">str2</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">calcdistance</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span><span class="n">str2</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">calcdistance</span><span class="p">(</span><span class="n">string</span> <span class="n">str1</span><span class="p">,</span><span class="n">string</span> <span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">str2</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">m</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec1</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec2</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">vec1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">vec2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">m</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">str1</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">str2</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">cost</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">vec2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">vec1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span> <span class="o">?</span> <span class="n">vec2</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="n">vec1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">vec2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">vec1</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">cost</span> <span class="o">?</span> <span class="n">vec2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">:</span> <span class="n">vec1</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">cost</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">vec1</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">vec2</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识网络爬虫]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/03/10/ren-shi-wang-luo-pa-chong/"/>
    <updated>2017-03-10T19:39:43+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/03/10/ren-shi-wang-luo-pa-chong</id>
    <content type="html"><![CDATA[<h2>认识网络爬虫</h2>

<h3>什么是网络爬虫</h3>

<p>   <em>传统网络爬虫是一个自动提取网页的程序,它为搜索引擎从万维网上下载网页,是搜索引擎的重要组成。
一般从一个或若干初始网页的URL开始,获得初始网页上的URL,在抓取网页的过程中,不断从当前页面上抽取新的URL放入队列,直到满
足系统的一定停止条件。</em></p>

<h3>爬虫有什么用？</h3>

<p>   <em>随着现代商业元素的发展，网络爬虫也开始呈现出一种多元化发展的趋势，应用在各种不同的领域。例如：商业数据收集、科学数据采集、社会特征分析等等</em>
   <img src="http://p1.bqimg.com/567571/795209d053f87619.png" alt="" /></p>

<ol>
<li>通用搜索引擎网页搜集器</li>
<li>垂直搜索引擎（招聘网，二手车，买房网）</li>
<li>科学研究</li>
<li>hacking
&hellip;&hellip;</li>
</ol>


<h3>一个简单的python爬虫</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#！/usr/bin/env python</span>
</span><span class='line'><span class="c">#coding=utf-8</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pyquery</span> <span class="kn">import</span> <span class="n">PyQuery</span> <span class="k">as</span> <span class="n">pq</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://zhixing.bjtu.edu.cn/portal.php&#39;</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'><span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">pq</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;#portal_block_617 li&gt;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">p</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">pq</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;http://zhixing.bjtu.edu.cn/&#39;</span><span class="o">+</span><span class="n">pq</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s">&#39;href&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>爬虫工作过程解析</h3>

<pre><code>网络爬虫框架主要由控制器、解析器和索引库三大部分组成，而爬虫工作原理主要是解析器这个环节，解析器的主要工作是下载网页，进行页面的处理，主要是将一些JS脚本标签、CSS代码内容、空格字符、HTML标签等内容处理掉，爬虫的基本工作是由解析器完成。所以解析器的具体流程是：
</code></pre>

<blockquote><p><strong>入口访问->下载内容->分析结构->提取内容</strong></p></blockquote>

<h4>下面以爬取<a href="http://www.luoo.net/">落网</a>为例子</h4>

<p><strong>第一步 确定目的</strong>
抓取目标网站的某一期所有音乐</p>

<p><strong>第二步 分析页面结构</strong>
访问落网的某一期刊，通过Chrome的（F12）开发者模式查看播放列表中的歌曲，右侧选中的是一些需要特别注意的语义结构，见下图所示：</p>

<p><img src="http://i1.piimg.com/567571/ed8e842e2bb1bb13.png" alt="" /></p>

<p>这时我们可以看到在Chrome的开发者模式的Network中看到实际请求的播放文件。
根据以上分析我们可以得到播放清单的位置和音乐文件的路径，接下来我们通过Python来实现这个目的。</p>

<p><strong>实现爬虫</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#-*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">faker</span> <span class="kn">import</span> <span class="n">Factory</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">Queue</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'>
</span><span class='line'><span class="n">fake</span> <span class="o">=</span> <span class="n">Factory</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'><span class="n">luoo_site</span> <span class="o">=</span> <span class="s">&#39;http://www.luoo.net/music/&#39;</span>
</span><span class='line'><span class="n">luoo_site_mp3</span> <span class="o">=</span> <span class="s">&#39;http://luoo-mp3.kssws.ks-cdn.com/low/luoo/radio</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">.mp3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Connection&#39;</span><span class="p">:</span> <span class="s">&#39;keep-alive&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="n">fake</span><span class="o">.</span><span class="n">user_agent</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_proxies</span><span class="p">():</span>
</span><span class='line'>    <span class="n">ip_index</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">proxy_ips</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#39;http&#39;</span><span class="p">:</span> <span class="n">proxy_ips</span><span class="p">[</span><span class="n">ip_index</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fix_characters</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;&lt;&#39;</span><span class="p">,</span> <span class="s">&#39;&gt;&#39;</span><span class="p">,</span> <span class="s">&#39;:&#39;</span><span class="p">,</span> <span class="s">&#39;&quot;&#39;</span><span class="p">,</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\\\\</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;|&#39;</span><span class="p">,</span> <span class="s">&#39;?&#39;</span><span class="p">,</span> <span class="s">&#39;*&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LuooSpider</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">vols</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;[luoo spider]&#39;</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;=&#39;</span> <span class="o">*</span> <span class="mi">20</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="n">queue</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">vol</span> <span class="o">=</span> <span class="s">&#39;1&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">vols</span> <span class="o">=</span> <span class="n">vols</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">vol</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">vols</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">spider</span><span class="p">(</span><span class="n">vol</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;</span><span class="se">\\</span><span class="s">ncrawl end</span><span class="se">\\</span><span class="s">n</span><span class="se">\\</span><span class="s">n&#39;</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">vol</span><span class="p">):</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">=</span> <span class="n">luoo_site</span> <span class="o">+</span> <span class="n">vol</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;crawling: &#39;</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\\</span><span class="s">n&#39;</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="n">random_proxies</span><span class="p">())</span>
</span><span class='line'>                <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="s">&#39;html.parser&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">title</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;span&#39;</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;vol-title&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>        <span class="n">cover</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;img&#39;</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;vol-cover&#39;</span><span class="p">})[</span><span class="s">&#39;src&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">desc</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;div&#39;</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;vol-desc&#39;</span><span class="p">})</span>
</span><span class='line'>        <span class="n">track_names</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;class&#39;</span><span class="p">:</span> <span class="s">&#39;trackname&#39;</span><span class="p">})</span>
</span><span class='line'>        <span class="n">track_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">track_names</span><span class="p">)</span>
</span><span class='line'>        <span class="n">tracks</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">track_names</span><span class="p">:</span>
</span><span class='line'>            <span class="n">_id</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">track</span><span class="o">.</span><span class="n">text</span><span class="p">[:</span><span class="mi">2</span><span class="p">]))</span> <span class="k">if</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">vol</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">)</span> <span class="k">else</span> <span class="n">track</span><span class="o">.</span><span class="n">text</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>            <span class="n">_name</span> <span class="o">=</span> <span class="n">fix_characters</span><span class="p">(</span><span class="n">track</span><span class="o">.</span><span class="n">text</span><span class="p">[</span><span class="mi">4</span><span class="p">:])</span>
</span><span class='line'>            <span class="n">tracks</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">_id</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="n">_name</span><span class="p">})</span>
</span><span class='line'>            <span class="n">phases</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;phase&#39;</span><span class="p">:</span> <span class="n">vol</span><span class="p">,</span>                         <span class="c"># 期刊编号</span>
</span><span class='line'>                <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span>                       <span class="c"># 期刊标题</span>
</span><span class='line'>                 <span class="s">&#39;cover&#39;</span><span class="p">:</span> <span class="n">cover</span><span class="p">,</span>                      <span class="c"># 期刊封面</span>
</span><span class='line'>                 <span class="s">&#39;desc&#39;</span><span class="p">:</span> <span class="n">desc</span><span class="p">,</span>                        <span class="c"># 期刊描述</span>
</span><span class='line'>                 <span class="s">&#39;track_count&#39;</span><span class="p">:</span> <span class="n">track_count</span><span class="p">,</span>          <span class="c"># 节目数</span>
</span><span class='line'>                 <span class="s">&#39;tracks&#39;</span><span class="p">:</span> <span class="n">tracks</span>                     <span class="c"># 节目清单(节目编号，节目名称)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">phases</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LuooDownloader</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">dist</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">queue</span> <span class="o">=</span> <span class="n">queue</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">dist</span> <span class="o">=</span> <span class="n">dist</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">qsize</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">pass</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">phases</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">download</span><span class="p">(</span><span class="n">phases</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">download</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">phases</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">phases</span><span class="p">[</span><span class="s">&#39;tracks&#39;</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">file_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span> <span class="o">%</span> <span class="p">(</span><span class="n">phases</span><span class="p">[</span><span class="s">&#39;phase&#39;</span><span class="p">],</span> <span class="n">track</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">local_file_dict</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">dist</span><span class="p">,</span> <span class="n">phases</span><span class="p">[</span><span class="s">&#39;phase&#39;</span><span class="p">])</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">local_file_dict</span><span class="p">):</span>
</span><span class='line'>                <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">local_file_dict</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">local_file</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">.</span><span class="si">%s</span><span class="s">.mp3&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">local_file_dict</span><span class="p">,</span> <span class="n">track</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">track</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">])</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">local_file</span><span class="p">):</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&#39;downloading: &#39;</span> <span class="o">+</span> <span class="n">track</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span>
</span><span class='line'>                <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">file_url</span><span class="p">,</span> <span class="n">proxies</span><span class="o">=</span><span class="n">random_proxies</span><span class="p">(),</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>                <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">local_file</span><span class="p">,</span> <span class="s">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&#39;done.</span><span class="se">\\</span><span class="s">n&#39;</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&#39;break: &#39;</span> <span class="o">+</span> <span class="n">track</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">spider_queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">luoo</span> <span class="o">=</span> <span class="n">LuooSpider</span><span class="p">(</span><span class="n">luoo_site</span><span class="p">,</span> <span class="n">vols</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;680&#39;</span><span class="p">,</span> <span class="s">&#39;721&#39;</span><span class="p">,</span> <span class="s">&#39;725&#39;</span><span class="p">,</span> <span class="s">&#39;720&#39;</span><span class="p">],</span><span class="n">queue</span><span class="o">=</span><span class="n">spider_queue</span><span class="p">)</span>
</span><span class='line'>    <span class="n">luoo</span><span class="o">.</span><span class="n">setDaemon</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">luoo</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">downloader_count</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">downloader_count</span><span class="p">):</span>
</span><span class='line'>        <span class="n">luoo_download</span> <span class="o">=</span> <span class="n">LuooDownloader</span><span class="p">(</span><span class="n">luoo_site_mp3</span><span class="p">,</span> <span class="s">&#39;/home/luoo&#39;</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="n">spider_queue</span><span class="p">)</span>
</span><span class='line'>        <span class="n">luoo_download</span><span class="o">.</span><span class="n">setDaemon</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">luoo_download</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中文分词的简介]]></title>
    <link href="http://edmondfrank.github.io/blog/2017/02/28/zhong-wen-fen-ci-de-jian-jie/"/>
    <updated>2017-02-28T20:23:19+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2017/02/28/zhong-wen-fen-ci-de-jian-jie</id>
    <content type="html"><![CDATA[<h2>中文分词的简介</h2>

<h3>一：中文分词是什么？</h3>

<p>中文分词指的是将一个汉字序列切分成一个一个单独的词。
中文分词技术属于自然语言处理技术范畴，对于一句话，人可以通过自己的知识来明白哪些是词，哪些不是词，但如何让计算机也能理解？其处理过程就是分词算法。</p>

<h3>二：为什么要进行中文分词？</h3>

<p>词是最小的能够独立活动的有意义的语言成分，英文单词之间是以空格作为自然分界符的，而汉语是以字为基本的书写单位，词语之间没有明显的区分标记，因此，中文词语分析是中文信息处理的基础与关键。</p>

<p>中文分词对于搜索引擎来说，最重要的并不是找到所有结果，因为在上百亿的网页中找到所有结果没有太多的意义，没有人能看得完，最重要的是把最相关的结果排在最前面，这也称为相关度排序。中文分词的准确与否，常常直接影响到对搜索结果的相关度排序。</p>

<h3>三：常用的中文分词算法及原理</h3>

<p>分词算法大体上可分为三大类：<strong>（1）基于字典、词库匹配的分词方法（2）基于词频度统计的分词方法（3）基于知识理解的分词方法</strong>。</p>

<h4>（1）词典匹配：</h4>

<p>词典匹配、汉语词法或其它汉语语言知识进行分词，如：<strong>最大匹配法、最小分词方法</strong>等。这类方法简单、分词效率较高,但汉语语言现象复杂丰富，词典的完备性、规则的一致性等问题使其难以适应开放的大规模文本的分词处理</p>

<p><strong>最大正向匹配法</strong>：通常简称为ＭＭ法。其基本思想为：假定分词词典中的最长词有i个汉字字符，则用被处理文档的当前字串中的前i个字作为匹配字段，查找字典。若字典中存在这样的一个i字词，则匹配成功，匹配字段被作为一个词切分出来。如果词典中找不到这样的一个i字词，则匹配失败，将匹配字段中的最后一个字去掉，对剩下的字串重新进行匹配处理，如此进行下去，直到匹配成功，即切分出一个词或剩余字串的长度为零为止。这样就完成了一轮匹配，然后取下一个i字字串进行匹配处理，直到文档被扫描完为止。</p>

<p>由于汉语中偏正结构较多，若从后向前匹配，可以适当提高精确度。所以，逆向最大匹配法比正向最大匹配法的误差要小。</p>

<p><strong>逆向最大匹配法</strong>：通常简称为ＲＭＭ法。ＲＭＭ法的基本原理与ＭＭ法相同 ,不同的是分词切分的方向与MM法相反，而且使用的分词辞典也不同。逆向最大匹配法从被处理文档的末端开始匹配扫描，每次取最末端的2i个字符（i字字串）作为匹配字段，若匹配失败，则去掉匹配字段最前面的一个字，继续匹配。相应地，它使用的分词词典是逆序词典，其中的每个词条都将按逆序方式存放。在实际处理时，先将文档进行倒排处理，生成逆序文档。然后，根据逆序词典，对逆序文档用正向最大匹配法处理即可。</p>

<p><strong>最少切分法（最小分词法）</strong>：使每一句中切出的词数最小。</p>

<h4>（2）基于统计的分词算法：</h4>

<p>统计模型则基于字和词的统计信息，把相邻字间的信息、词频及相应的共现信息通过条件概率分布模型应用于分词，由于这些信息是通过调查真实语料而取得的，因而基于统计的分词方法具有较好的实用性。</p>

<p>其中最具代表性的是：<a href="http://baike.baidu.com/item/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B">马尔可夫模型</a></p>

<h3>四：常用中文分词工具（引擎）</h3>

<ol>
<li><a href="https://github.com/fxsjy/jieba">结巴中文分词（多语言版本）</a></li>
<li><a href="https://github.com/NLPchina/ansj_seg">Ansj中文分词（java）</a></li>
<li><a href="http://bosonnlp.com/dev/center">BosonNLP</a></li>
<li><a href="http://www.oschina.net/p/ikanalyzer">IKAnalyzer</a></li>
<li><a href="http://ictclas.nlpir.org/docs">NLPIR</a></li>
<li><a href="http://www.xunsearch.com/scws/docs.php">SCWS中文分词</a></li>
<li><a href="http://pangusegment.codeplex.com/">盘古分词</a></li>
<li><a href="https://code.google.com/p/paoding/">庖丁解牛</a></li>
<li><a href="http://www.sogou.com/labs/webservice/">搜狗分词</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大数据下的Hadoop]]></title>
    <link href="http://edmondfrank.github.io/blog/2016/12/22/da-shu-ju-xia-de-hadoop/"/>
    <updated>2016-12-22T20:00:09+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2016/12/22/da-shu-ju-xia-de-hadoop</id>
    <content type="html"><![CDATA[<h2>大数据下的Hadoop</h2>

<p><strong>(1) 什么是大数据概念？</strong>
    <a href="http://baike.baidu.com/item/%E5%A4%A7%E6%95%B0%E6%8D%AE/1356941">大数据(big data,mega data)</a>，或称巨量资料，指的是需要新处理模式才能具有更强的决策力、洞察力和流程优化能力的海量、高增长率和多样化的信息资产。</p>

<p><strong>(2) 常规的数据处理 </strong>
* 数据的采集
* 明确数据处理的目的
* 数据清洗 : 统一数据格式、删除重复值、处理缺失字段、检查数据逻辑错误等
* 数据加工 : 数据抽取、数据计算、数据分组和数据转换等
* 数据抽样
数据处理完毕后，就可以进行数据分析了</p>

<p><strong>(3) 主流的三大分布式计算系统</strong></p>

<blockquote><p>一.Hadoop 基于java</p></blockquote>

<p>   Hadoop采用MapReduce分布式计算框架，并根据GFS开发了HDFS分布式文件系统，根据BigTable开发了HBase数据存储系统。</p>

<blockquote><p>二.Spark  基于scala</p></blockquote>

<pre><code>Spark也是Apache基金会的开源项目，它由加州大学伯克利分校的实验室开发，是另外一种重要的分布式计算系统。它在Hadoop的基础上进行了一些架构上的改良。Spark与Hadoop最大的不同点在于，Hadoop使用硬盘来存储数据，而Spark使用内存来存储数据，因此Spark可以提供超过Hadoop 100倍的运算速度。但是，由于内存断电后会丢失数据，Spark不能用于处理需要长期保存的数据。
</code></pre>

<blockquote><p>三.Storm  基于clojure</p></blockquote>

<pre><code>Storm是Twitter主推的分布式计算系统，它由BackType团队开发，是Apache基金会的孵化项目。它在Hadoop的基础上提供了实时运算的特性，可以实时的处理大数据流。不同于Hadoop和Spark，Storm不进行数据的收集和存储工作，它直接通过网络实时的接受数据并且实时的处理数据，然后直接通过网络实时的传回结果。
</code></pre>

<p>   <em>然而,以上的平台的语言开发组件都有一个共同点,即,基于java的JVM</em></p>

<p><strong>(4) 有关hadoop</strong></p>

<p>Hadoop核心 HDFS和MapReduce</p>

<pre><code>HDFS
</code></pre>

<p>   HDFS（Hadoop Distributed File System，Hadoop分布式文件系统），它是一个高度容错性的系统，适合部署在廉价的机器上。HDFS能提供高吞吐量的数据访问，适合那些有着超大数据集（large data set）的应用程序。</p>

<blockquote><p>HDFS的设计特点是：</p></blockquote>

<ol>
<li>大数据文件，非常适合上T级别的大文件或者一堆大数据文件的存储，如果文件只有几个G甚至更小就没啥意思了。</li>
<li>文件分块存储，HDFS会将一个完整的大文件平均分块存储到不同计算器上，它的意义在于读取文件时可以同时从多个主机取不同区块的文件，多主机读取比单主机读取效率要高得多得都。</li>
<li>流式数据访问，一次写入多次读写，这种模式跟传统文件不同，它不支持动态改变文件内容，而是要求让文件一次写入就不做变化，要变化也只能在文件末添加内容。</li>
<li>廉价硬件，HDFS可以应用在普通PC机上，这种机制能够让给一些公司用几十台廉价的计算机就可以撑起一个大数据集群。</li>
<li>硬件故障，HDFS认为所有计算机都可能会出问题，为了防止某个主机失效读取不到该主机的块文件，它将同一个文件块副本分配到其它某几个主机上，如果其中一台主机失效，可以迅速找另一块副本取文件。</li>
</ol>


<blockquote><p>HDFS的关键元素：</p></blockquote>

<p><strong>Block：将一个文件进行分块，通常是64M。</strong></p>

<p>NameNode：保存整个文件系统的目录信息、文件信息及分块信息，这是由唯一一台主机专门保存，当然这台主机如果出错，NameNode就失效了。在Hadoop2.*开始支持activity-standy模式&mdash;-如果主NameNode失效，启动备用主机运行NameNode。</p>

<p><strong>DataNode：分布在廉价的计算机上，用于存储Block块文件。</strong></p>

<p><img src="http://edmondfrank.github.io/images/hdfs.jpg"></p>

<pre><code>MapReduce
</code></pre>

<p>   通俗说MapReduce是一套从海量·源数据提取分析元素最后返回结果集的编程模型，将文件分布式存储到硬盘是第一步，而从海量数据中提取分析我们需要的内容就是MapReduce做的事了。</p>

<p>   下面以一个计算海量数据最大值为例：一个银行有上亿储户，银行希望找到存储金额最高的金额是多少，按照传统的计算方式，我们会这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//java</span>
</span><span class='line'><span class="n">Long</span> <span class="n">moneys</span><span class="o">[]</span> <span class="o">...</span>
</span><span class='line'><span class="n">Long</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">moneys</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">moneys</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">max</span><span class="o">){</span>
</span><span class='line'>    <span class="n">max</span> <span class="o">=</span> <span class="n">moneys</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果计算的数组长度少的话，这样实现是不会有问题的，还是面对海量数据的时候就会有问题。</p>

<p>MapReduce会这样做：首先数字是分布存储在不同块中的，以某几个块为一个Map，计算出Map中最大的值，然后将每个Map中的最大值做Reduce操作，Reduce再取最大值给用户。</p>

<p><img src="http://edmondfrank.github.io/images/map.jpg"></p>

<p>MapReduce的基本原理就是：将大的数据分析分成小块逐个分析，最后再将提取出来的数据汇总分析，最终获得我们想要的内容。当然怎么分块分析，怎么做Reduce操作非常复杂，Hadoop已经提供了数据分析的实现，我们只需要编写简单的需求命令即可达成我们想要的数据。</p>

<h2>总结</h2>

<p>   <strong>总的来说:</strong> <em>Hadoop适合应用于大数据存储和大数据分析的应用，适合于服务器几千台到几万台的集群运行，支持PB级的存储容量。Hadoop典型应用有：搜索、日志处理、推荐系统、数据分析、视频图像分析、数据保存等。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xlib编程之-创建全屏透明窗口]]></title>
    <link href="http://edmondfrank.github.io/blog/2016/10/21/xlibbian-cheng-zhi-chuang-jian-quan-ping-tou-ming-chuang-kou/"/>
    <updated>2016-10-21T20:11:20+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2016/10/21/xlibbian-cheng-zhi-chuang-jian-quan-ping-tou-ming-chuang-kou</id>
    <content type="html"><![CDATA[<h2>Xlib编程之-创建全屏透明窗口</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="c1">//source file : win.c</span>
</span><span class='line'> <span class="cp">#include &lt;X11/Xlib.h&gt;</span>
</span><span class='line'> <span class="cp">#include &lt;X11/Xutil.h&gt;</span>
</span><span class='line'> <span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>    <span class="n">Display</span><span class="o">*</span> <span class="n">display</span> <span class="o">=</span> <span class="n">XOpenDisplay</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XVisualInfo</span> <span class="n">vinfo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">XMatchVisualInfo</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">DefaultScreen</span><span class="p">(</span><span class="n">display</span><span class="p">),</span> <span class="mi">32</span><span class="p">,</span> <span class="n">TrueColor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vinfo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XSetWindowAttributes</span> <span class="n">attr</span><span class="p">;</span><span class="c1">//窗口属性设置</span>
</span><span class='line'>    <span class="n">attr</span><span class="p">.</span><span class="n">colormap</span> <span class="o">=</span> <span class="n">XCreateColormap</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">DefaultRootWindow</span><span class="p">(</span><span class="n">display</span><span class="p">),</span> <span class="n">vinfo</span><span class="p">.</span><span class="n">visual</span><span class="p">,</span> <span class="n">AllocNone</span><span class="p">);</span>
</span><span class='line'>    <span class="n">attr</span><span class="p">.</span><span class="n">border_pixel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">attr</span><span class="p">.</span><span class="n">background_pixel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//取输出设备的长宽像素</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">screen</span> <span class="o">=</span> <span class="n">DefaultScreen</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">DisplayHeight</span><span class="p">(</span><span class="n">display</span><span class="p">,</span><span class="n">screen</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">DisplayWidth</span><span class="p">(</span><span class="n">display</span><span class="p">,</span><span class="n">screen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//开始创建窗口</span>
</span><span class='line'>    <span class="n">Window</span> <span class="n">win</span> <span class="o">=</span> <span class="n">XCreateWindow</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">DefaultRootWindow</span><span class="p">(</span><span class="n">display</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">vinfo</span><span class="p">.</span><span class="n">depth</span><span class="p">,</span> <span class="n">InputOutput</span><span class="p">,</span> <span class="n">vinfo</span><span class="p">.</span><span class="n">visual</span><span class="p">,</span>  <span class="n">CWColormap</span> <span class="o">|</span> <span class="n">CWBorderPixel</span> <span class="o">|</span> <span class="n">CWBackPixel</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">attr</span><span class="p">);</span>
</span><span class='line'>    <span class="n">XSelectInput</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">win</span><span class="p">,</span> <span class="n">StructureNotifyMask</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//GC gc = XCreateGC(display, win, 0, 0);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">    Atom wm_delete_window = XInternAtom(display, &quot;WM_DELETE_WINDOW&quot;, 0);</span>
</span><span class='line'><span class="cm">    XSetWMProtocols(display, win, &amp;wm_delete_window, 1);</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="n">XMapWindow</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">win</span><span class="p">);</span>
</span><span class='line'>    <span class="n">XMoveWindow</span><span class="p">(</span><span class="n">display</span><span class="p">,</span><span class="n">win</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">XFlush</span><span class="p">(</span><span class="n">display</span><span class="p">);</span><span class="c1">//刷新输出设备</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">keep_running</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">XEvent</span> <span class="n">event</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//窗口事件监听尝试</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">keep_running</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">XNextEvent</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">ClientMessage</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">xclient</span><span class="p">.</span><span class="n">message_type</span> <span class="o">==</span> <span class="n">XInternAtom</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="s">&quot;WM_PROTOCOLS&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">Atom</span><span class="p">)</span><span class="n">event</span><span class="p">.</span><span class="n">xclient</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">XInternAtom</span><span class="p">(</span><span class="n">display</span><span class="p">,</span><span class="s">&quot;WM_DELETE_WINDOW&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">keep_running</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//结束销毁</span>
</span><span class='line'>    <span class="n">XDestroyWindow</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="n">win</span><span class="p">);</span>
</span><span class='line'>    <span class="n">XCloseDisplay</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>编译</strong></p>

<blockquote><p>gcc -o win ./win.c -L/usr/lib -lX11</p></blockquote>

<p><strong>That is All</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016-10-12:天翼校园网客户端登录协议更新]]></title>
    <link href="http://edmondfrank.github.io/blog/2016/10/12/tian-yi-xiao-yuan-wang-ke-hu-duan-deng-lu-xie-yi-geng-xin/"/>
    <updated>2016-10-12T22:14:07+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2016/10/12/tian-yi-xiao-yuan-wang-ke-hu-duan-deng-lu-xie-yi-geng-xin</id>
    <content type="html"><![CDATA[<h2>天翼校园网客户端登录协议更新</h2>

<p><strong>PS:此登录协议仅供参考,未必适合所有高校.</strong>
<strong>本项目源码不遵循任何协议,各位可以随意下载及修改,但请勿用作非法 or 商业用途!</strong></p>

<h3>主要变化</h3>

<p><strong><a href="https://github.com/EdmondFrank/Esurfing">原登录协议</a> 步骤为:challange -> 获取rescode -> login,现登录协议取消了rescode认证,因此可以省略challange可以直接login</strong></p>

<h3>登录协议主要源码如下:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#coding:utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;digest/md5&#39;</span>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;./config.json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'><span class="n">username</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s2">&quot;username&quot;</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s2">&quot;password&quot;</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="n">clientip</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s2">&quot;clientip&quot;</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="n">nasip</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s2">&quot;nasip&quot;</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="n">mac</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s2">&quot;mac&quot;</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="n">iswifi</span><span class="o">=</span><span class="s2">&quot;1050&quot;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_timestamp</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">to_s</span><span class="o">+</span><span class="s1">&#39;444&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_md5</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span>  <span class="no">Digest</span><span class="o">::</span><span class="no">MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">str</span><span class="o">+</span><span class="s1">&#39;Eshore!@#&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">active</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">clientip</span><span class="p">,</span><span class="n">nasip</span><span class="p">,</span><span class="n">mac</span><span class="p">)</span>
</span><span class='line'>  <span class="n">timestamp</span> <span class="o">=</span> <span class="n">get_timestamp</span>
</span><span class='line'>  <span class="n">authenticator</span><span class="o">=</span> <span class="n">get_md5</span><span class="p">(</span><span class="n">clientip</span><span class="o">+</span><span class="n">nasip</span><span class="o">+</span><span class="n">mac</span><span class="o">+</span><span class="n">timestamp</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">username</span><span class="p">,</span><span class="n">clientip</span><span class="p">,</span><span class="n">nasip</span><span class="p">,</span><span class="n">mac</span><span class="p">,</span><span class="n">timestamp</span><span class="p">,</span><span class="n">authenticator</span>
</span><span class='line'>  <span class="n">url</span><span class="o">=</span><span class="s2">&quot;http://enet.10000.gd.cn:8001/hbservice/client/active?username=</span><span class="si">#{</span><span class="n">username</span><span class="si">}</span><span class="s2">&amp;clientip=</span><span class="si">#{</span><span class="n">clientip</span><span class="si">}</span><span class="s2">&amp;nasip=</span><span class="si">#{</span><span class="n">nasip</span><span class="si">}</span><span class="s2">&amp;mac=</span><span class="si">#{</span><span class="n">mac</span><span class="si">}</span><span class="s2">&amp;timestamp=</span><span class="si">#{</span><span class="n">timestamp</span><span class="si">}</span><span class="s2">&amp;authenticator=</span><span class="si">#{</span><span class="n">authenticator</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>  <span class="n">resp</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#resp = `curl -A &quot;&quot; -H &quot;Accept:&quot; -H &quot;Host:enet.10000.gd.cn:8001&quot; #{url}`</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">result</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">[</span><span class="s2">&quot;rescode&quot;</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="p">,</span><span class="n">clientip</span><span class="p">,</span><span class="n">nasip</span><span class="p">,</span><span class="n">mac</span><span class="p">,</span><span class="n">iswifi</span><span class="p">)</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://enet.10000.gd.cn:10001/client/login&quot;</span>
</span><span class='line'>  <span class="n">timestamp</span> <span class="o">=</span>  <span class="n">get_timestamp</span>
</span><span class='line'>  <span class="n">authenticator</span><span class="o">=</span><span class="n">get_md5</span><span class="p">(</span><span class="n">clientip</span><span class="o">+</span><span class="n">nasip</span><span class="o">+</span><span class="n">mac</span><span class="o">+</span><span class="n">timestamp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">[</span><span class="s2">&quot;username&quot;</span><span class="o">]=</span><span class="n">username</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">[</span><span class="s2">&quot;password&quot;</span><span class="o">]=</span><span class="n">password</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">[</span><span class="s2">&quot;clientip&quot;</span><span class="o">]=</span><span class="n">clientip</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">[</span><span class="s2">&quot;nasip&quot;</span><span class="o">]=</span><span class="n">nasip</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">[</span><span class="s2">&quot;mac&quot;</span><span class="o">]=</span><span class="n">mac</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">[</span><span class="s2">&quot;timestamp&quot;</span><span class="o">]=</span><span class="n">timestamp</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">[</span><span class="s2">&quot;authenticator&quot;</span><span class="o">]=</span><span class="n">authenticator</span>
</span><span class='line'>  <span class="n">postdata</span><span class="o">[</span><span class="s2">&quot;iswifi&quot;</span><span class="o">]=</span><span class="n">iswifi</span>
</span><span class='line'>  <span class="n">data</span><span class="o">=</span><span class="n">postdata</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;application/json&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Host&quot;</span><span class="o">]=</span><span class="s2">&quot;enet.10000.gd.cn:10001&quot;</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Content-Length&quot;</span><span class="o">]=</span><span class="n">data</span><span class="o">.</span><span class="n">bytesize</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Expect&quot;</span><span class="o">]=</span><span class="s2">&quot;100-continue&quot;</span>
</span><span class='line'>  <span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Connection&quot;</span><span class="o">]=</span><span class="s2">&quot;Keep-Alive&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="sb">`curl -d &#39;</span><span class="si">#{</span><span class="n">data</span><span class="si">}</span><span class="sb">&#39; -A &quot;&quot; -H &quot;Accept:&quot; -H &quot;Content-Type:application/json&quot; -H &quot;Host:enet.10000.gd.cn:10001&quot; -H &quot;Content-Length:</span><span class="si">#{</span><span class="n">data</span><span class="o">.</span><span class="n">bytesize</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="sb">&quot; -H &quot;Expect:100-continue&quot; -H &quot;Connection:Keep-Alive&quot; -X POST </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">code</span> <span class="o">=</span> <span class="n">active</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">clientip</span><span class="p">,</span><span class="n">nasip</span><span class="p">,</span><span class="n">mac</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">code</span> <span class="o">!=</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>  <span class="n">login</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="p">,</span><span class="n">clientip</span><span class="p">,</span><span class="n">nasip</span><span class="p">,</span><span class="n">mac</span><span class="p">,</span><span class="n">iswifi</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注:源码中才用了curl发送post包,使用前需先确认系统中是否用curl工具.若是改回Ruby的net/http发包请去掉[Expect]=&ldquo;100-continue"头</strong></p>

<p><strong>目前仅提供登录协议供大家参考,有能力者可自行实现完整程序及Gui界面,完整的程序(Cli版本/Gui版本),博主也会后续在我的<a href="https://github.com/EdmondFrank">Github</a>上发布</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始的Rust-Enumerate方法]]></title>
    <link href="http://edmondfrank.github.io/blog/2016/09/21/cong-ling-kai-shi-de-rust-enumeratefang-fa/"/>
    <updated>2016-09-21T19:37:14+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2016/09/21/cong-ling-kai-shi-de-rust-enumeratefang-fa</id>
    <content type="html"><![CDATA[<h2>从零开始的Rust学习之旅-Enumerate方法</h2>

<p>Enumerate方法
当你需要记录你已经循环了多少次了的时候,你可以使用 .enumerate()函数。</p>

<h3>对范围(On ranges):</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="k">in</span> <span class="p">(</span><span class="mf">5.</span><span class="p">.</span><span class="mi">10</span><span class="p">).</span><span class="n">enumerate</span><span class="p">()</span>  
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;i  =   {}  and j   =   {}&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span>    <span class="n">j</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>输出:<br/>
i = 0 and j = 5 <br/>
i = 1 and j = 6 <br/>
i = 2 and j = 7 <br/>
i = 3 and j = 8 <br/>
i = 4 and j = 9 <br/>
<strong>别忘了在范围外面加上括号</strong></p></blockquote>

<h3>对迭代器(On iterators):</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">lines</span> <span class="o">=</span> <span class="s">&quot;hello</span><span class="se">\n</span><span class="s">world&quot;</span><span class="p">.</span><span class="n">lines</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">linenumber</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span> <span class="k">in</span> <span class="n">lines</span><span class="p">.</span><span class="n">enumerate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}:{}&quot;</span><span class="p">,</span> <span class="n">linenumber</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>输出:<br/>
0:hello <br/>
1:world <br/></p></blockquote>
]]></content>
  </entry>
  
</feed>
