<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript,编程,笔记 | EdmondFrank's 时光足迹]]></title>
  <link href="http://edmondfrank.github.io/blog/categories/javascript-bian-cheng-bi-ji/atom.xml" rel="self"/>
  <link href="http://edmondfrank.github.io/"/>
  <updated>2016-10-21T20:17:49+08:00</updated>
  <id>http://edmondfrank.github.io/</id>
  <author>
    <name><![CDATA[EdmondFrank]]></name>
    <email><![CDATA[EdmomdFrank@yahoo.co.jp]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript学习笔记2]]></title>
    <link href="http://edmondfrank.github.io/blog/2016/06/26/javascriptxue-xi-bi-ji-2/"/>
    <updated>2016-06-26T14:52:05+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2016/06/26/javascriptxue-xi-bi-ji-2</id>
    <content type="html"><![CDATA[<h1>JavaScript学习笔记2</h1>

<h2>一.流程控制</h2>

<h3>一般选择-if 结构</h3>

<pre><code class="javascript">if(表达式1){
执行1
} else if(表达式2) {
执行2
} else {
执行3
}
</code></pre>

<h3>多重选择-switch 结构</h3>

<pre><code class="javascript">switch(表达式){
case 条件1:
  执行1
  break;
case 条件2:
  执行2
  break;
case 条件n:
  执行n
  break;
default:
  ...;
}
</code></pre>

<p><strong>(注:switch所依赖的参数必须赋初始值,值与每个case值匹配,满足执行改case后的所以语句,并用break语句来阻止运行下一个case.)</strong></p>

<h3>循环语句-for</h3>

<pre><code class="javascript">for(初始化变量;循环条件;循环迭代)
{
  循环语句;
}
</code></pre>

<h3>循环语句-while</h3>

<pre><code class="javascript">while(判断条件)
{
  循环语句;
}
</code></pre>

<p><strong>(break语句可用在循环语句中,跳出循环.
与其类似的有continue语句,用于跳过本次循环,而整个循环体继续执行.)</strong></p>

<h2>二.函数(function)</h2>

<pre><code class="javascript">function fun(){
//函数体
}
fun();//调用函数

//带参函数
function fun2(arg1,arg2){
//函数体
}

//带参数及返回值的函数
function add(a,b){
  return a+b;
}
</code></pre>

<h3>函数的this</h3>

<p>函数体中的this表示当前的方法属于谁.</p>

<p>eg:
<code>javascript
function add(a,b)
{
    return this+(a+b);
}
console.log(add(3,6));
</code>
输出结果:</p>

<blockquote><p>[object global]9</p></blockquote>

<h3>函数的call</h3>

<p>函数的call方法可以改变函数的this的指向.</p>

<p>eg:
<code>javascript
function add(a,b)
{
    return this+(a+b);
}
console.log(add.call(2,3,6));
</code>
输出结果:</p>

<blockquote><p>11</p></blockquote>

<p><strong>(输出结果表明:this也是一个数字,所以叫号作为运算符而非连接符处理.)</strong></p>

<h3>函数的apply</h3>

<p>函数的apply方法也可以改变函数的this的指向,但不同的是,apply是将原参数作为一个数组进行传递.</p>

<p>eg:
<code>javascript
ar arr = [5, 6, 3, 2, 9, 44, 6, 3, 61, 22];
console.log(Math.min.apply(null,arr));
</code>
输出结果:</p>

<blockquote><p>2</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript学习笔记1]]></title>
    <link href="http://edmondfrank.github.io/blog/2016/06/24/javascriptxue-xi-bi-ji-1/"/>
    <updated>2016-06-24T21:41:53+08:00</updated>
    <id>http://edmondfrank.github.io/blog/2016/06/24/javascriptxue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<h1>JavaScript学习笔记1</h1>

<h2>一.第一个程序:Hello World的输出</h2>

<ul>
<li><p>控制台下的输出:</p>

<blockquote><p>console.log(&lsquo;Hello World!&rsquo;);</p></blockquote></li>
<li><p>消息框模式输出:</p>

<blockquote><p>alert(&lsquo;Hello World!&rsquo;);</p></blockquote></li>
</ul>


<p>　<img src="/images/alert.png"></p>

<h2>二.变量</h2>

<ul>
<li>必须以字母、下划线或美元符号开头，后面可以跟字母、下划线、美元符号和数字.
<code>javascript
myvar;
_myvar;
$myvar; //以上均为正确的变量名
1myvar; //错误,不能用数字开头
%myvar; //开头不能用(_,$)以外的特殊字符
var; //错误,不能使用保留字和关键字
</code>

<h3>变量的声明</h3>

<blockquote><p>var 变量名;</p></blockquote></li>
</ul>


<p>eg: var mynum = 1;</p>

<p>同时声明多个变量时使用",&ldquo;分割即可.</p>

<p>eg: var myvar,myvar2,myvar3;</p>

<p><strong>(注:在JavaScript中,未赋值的变量,会自动被使用"undefined"值来初始化)</strong></p>

<h2>三.数据类型</h2>

<p>JavaScript中有5种基本数据类型,分别是:
1. 字符串
2. 数字
3. 布尔值
4. 数组
5. 对象
<code>javascript
var mychar1 = "双引号包起来的字符串"; // 这是字符串
var mychar2 = '单引号包起来的字符串'; // 这也是字符串
var mynum1 = 6; // 这是数字6
var mynum3 = 123e5; // 这是使用科学（指数）计数法来书写的12300000
var mynum4 = 123e-5; // 这是0.00123
var mybool = true; // 这是布尔值
var myarr = [1, 2, 3]; // 这是数组
var myobject = {"p": "Hello"}; // 这是对象
</code></p>

<h2>四.表达式及运算符</h2>

<p>与Ruby和Python类似.
<strong>(注:完整语句后面记得加上";&ldquo;)</strong></p>

<h2>五.数组</h2>

<p>数组变量的声明:</p>

<blockquote><p>var arr = [&lsquo;a&rsquo;,&lsquo;b&rsquo;,&lsquo;c&rsquo;];</p></blockquote>

<p><strong>(注:任意一种类型的数据,都可以放进数组里,且数组支持嵌套)</strong>
eg:
<code>javascript
var arr = [{a:1}, [1, 2, 3], function(){ return true; }];
arr[0]; //对象
arr[1]; //数组
arr[2]; //函数
</code>
- length属性:返回数组成员的数量</p>

<p>eg:
<code>javascript
var arr = ['a', 'b'];
arr.length;    // =&gt; 2
</code>
<strong>(注:length 属性是可写的。如果人为设置一个小于当前成员个数的值，该数组的成员会自动减少到 length 设置的长度.即,随意改写length值会造成数据丢失问题.)</strong>
eg:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">a</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">b</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">c</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>    <span class="c1">// =&gt; 3&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="nx">arr</span><span class="p">;</span>    <span class="c1">// =&gt; [&amp;ldquo;a&amp;rdquo;, &amp;ldquo;b&amp;rdquo;]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//快速清空数组</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>增加新元素</h3>

<pre><code class="javascript">var myarr = [1,2,3];
myarr[3] = 4;
console.log(myarr); // =&gt;[1,2,3,4]
//此处特性与Ruby数组相似.
</code></pre>

<h2>六.对象</h2>

<p>JavaScript的对象，是指带有属性和方法的数据类型，一般由若干个“键值对”（key-value）构成</p>

<ul>
<li>键名
键名加不加引号都可以，前面的代码也可以写成这样：

<blockquote><p>var o = {
  &ldquo;p&rdquo;: &ldquo;Hello&rdquo;
};</p></blockquote></li>
</ul>


<p><strong>(注:键名如果不符合标识名的条件，也不是正整数，则必须加上引号)</strong></p>

<h3>生成方法</h3>

<pre><code class="javascript">var obj1 = {};
var obj2 = new Object();
var obj3 = Object.create(null);
</code></pre>

<h3>对象引用</h3>

<p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量的属性，会影响到其他所有变量(此处与C类似)</p>

<h3>内置对象</h3>

<p>JavaScript常见的内置对象(built-in object)有: String, Number, Boolean,Date Object</p>

<p>有关更多JavaScript内置对象相关属性及方法可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">JavaScript|MDN</a></p>
]]></content>
  </entry>
  
</feed>
